:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Graph.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Graph:

Graph
=====

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

A general-purpose mixed graph.

Description
-----------

A graph which allows to add both undirected (associative) and directed edges, with possibility of having multiple edges between the same pair of vertices.

::

    func _ready():
        var graph = Graph.new()
    
        var a = graph.add_vertex("a")
        var b = graph.add_vertex("b")
        var c = graph.add_vertex("c")
    
        var ab = graph.add_edge(a, b)
    
        print(graph.has_edge(a, b)) # Prints True
        print(graph.has_edge(a, c)) # Prints False

All graph's vertices and edges can be traversed the following way:

::

    for v in graph.get_vertices():
        print(v)
    
    for e in graph.get_edges():
        print(e)

You can also use a built-in (GDScript) iterator to traverse all vertices (may be slower):

::

    for v in graph:
        print(v)

It is possible to extend :ref:`GraphVertex<class_GraphVertex>` and :ref:`GraphEdge<class_GraphEdge>` via script, but you should also override :ref:`_create_vertex<class_Graph_method__create_vertex>` and :ref:`_create_edge<class_Graph_method__create_edge>` virtual methods to make the ``Graph`` instantiate the correct instances internally.

The graph can be searched by using an :ref:`iterator<class_Graph_property_iterator>` (using either depth-first or breadth-first search algorithm):

::

    var G = graph.iterator
    G.initialize(root)
    
    while G.has_next():
        var v = G.next()
        print(v)

For performance reasons, the graph uses unordered hashmap data structure, so insertion order of vertices and edges should not be assumed to be the same. Adding or removing vertices/edges while iterating the graph may lead to undefined behavior.

Properties
----------

+-------------------------------------------+------------------------------------------------+--------------------------------------+
| :ref:`Dictionary<class_Dictionary>`       | :ref:`data<class_Graph_property_data>`         | ``{"edges": [  ],"vertices": [  ]}`` |
+-------------------------------------------+------------------------------------------------+--------------------------------------+
| :ref:`GraphIterator<class_GraphIterator>` | :ref:`iterator<class_Graph_property_iterator>` |                                      |
+-------------------------------------------+------------------------------------------------+--------------------------------------+

Methods
-------

+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`           | :ref:`_create_edge<class_Graph_method__create_edge>` **(** **)** |virtual|                                                                                                               |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`           | :ref:`_create_vertex<class_Graph_method__create_vertex>` **(** **)** |virtual|                                                                                                           |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GraphEdge<class_GraphEdge>`     | :ref:`add_directed_edge<class_Graph_method_add_directed_edge>` **(** :ref:`Variant<class_Variant>` from, :ref:`Variant<class_Variant>` to, :ref:`Variant<class_Variant>` value=1.0 **)** |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GraphEdge<class_GraphEdge>`     | :ref:`add_edge<class_Graph_method_add_edge>` **(** :ref:`Variant<class_Variant>` a, :ref:`Variant<class_Variant>` b, :ref:`Variant<class_Variant>` value=1.0 **)**                       |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GraphVertex<class_GraphVertex>` | :ref:`add_vertex<class_Graph_method_add_vertex>` **(** :ref:`Variant<class_Variant>` value **)**                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`clear<class_Graph_method_clear>` **(** **)**                                                                                                                                       |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`clear_edges<class_Graph_method_clear_edges>` **(** **)**                                                                                                                           |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`find_connected_component<class_Graph_method_find_connected_component>` **(** :ref:`GraphVertex<class_GraphVertex>` vertex **)**                                                    |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GraphEdge<class_GraphEdge>`     | :ref:`find_edge<class_Graph_method_find_edge>` **(** :ref:`GraphVertex<class_GraphVertex>` a, :ref:`GraphVertex<class_GraphVertex>` b **)** |const|                                      |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GraphVertex<class_GraphVertex>` | :ref:`find_vertex<class_Graph_method_find_vertex>` **(** :ref:`Variant<class_Variant>` value **)**                                                                                       |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_connected_components<class_Graph_method_get_connected_components>` **(** **)**                                                                                                 |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_edge_count<class_Graph_method_get_edge_count>` **(** **)** |const|                                                                                                             |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_edges<class_Graph_method_get_edges>` **(** :ref:`GraphVertex<class_GraphVertex>` a=null, :ref:`GraphVertex<class_GraphVertex>` b=null **)** |const|                            |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_vertex_count<class_Graph_method_get_vertex_count>` **(** **)** |const|                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_vertices<class_Graph_method_get_vertices>` **(** **)** |const|                                                                                                                 |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_edge<class_Graph_method_has_edge>` **(** :ref:`GraphVertex<class_GraphVertex>` a, :ref:`GraphVertex<class_GraphVertex>` b **)** |const|                                        |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_vertex<class_Graph_method_has_vertex>` **(** :ref:`GraphVertex<class_GraphVertex>` vertex **)** |const|                                                                        |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_strongly_connected<class_Graph_method_is_strongly_connected>` **(** **)**                                                                                                       |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`minimum_spanning_tree<class_Graph_method_minimum_spanning_tree>` **(** **)** |const|                                                                                               |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`remove_edge<class_Graph_method_remove_edge>` **(** :ref:`GraphEdge<class_GraphEdge>` edge **)**                                                                                    |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`remove_vertex<class_Graph_method_remove_vertex>` **(** :ref:`GraphVertex<class_GraphVertex>` vertex **)**                                                                          |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_iterator_bfs<class_Graph_method_set_iterator_bfs>` **(** **)**                                                                                                                 |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_iterator_dfs<class_Graph_method_set_iterator_dfs>` **(** **)**                                                                                                                 |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`shortest_path_tree<class_Graph_method_shortest_path_tree>` **(** :ref:`GraphVertex<class_GraphVertex>` root **)** |const|                                                          |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_Graph_property_data:

- :ref:`Dictionary<class_Dictionary>` **data**

+-----------+--------------------------------------+
| *Default* | ``{"edges": [  ],"vertices": [  ]}`` |
+-----------+--------------------------------------+

Graph data, which contains all vertices and edges.

The vertices are stored in a single :ref:`Array<class_Array>` where values and IDs (unsigned int) are stored consecutively.

The edges represent an :ref:`Array<class_Array>` of edge data. The edge data is represented by an :ref:`Array<class_Array>` which stores the following fields:

\ ``unsigned int:`` ID of vertex ``a``\ 

\ ``unsigned int:`` ID of vertex ``b``\ 

\ ``Variant:`` Value (can be anything).

\ ``bool:`` Whether the edge is directed or not.

----

.. _class_Graph_property_iterator:

- :ref:`GraphIterator<class_GraphIterator>` **iterator**

+----------+---------------------+
| *Setter* | set_iterator(value) |
+----------+---------------------+
| *Getter* | get_iterator()      |
+----------+---------------------+

An iterator used for traversing the graph's vertices. The default iterator is based on depth-first search algorithm. You can extend :ref:`GraphIterator<class_GraphIterator>` class via script to customize the algorithm.

If set to ``null``, the default iterator is used.

Method Descriptions
-------------------

.. _class_Graph_method__create_edge:

- :ref:`Object<class_Object>` **_create_edge** **(** **)** |virtual|

Must return an instance of :ref:`GraphEdge<class_GraphEdge>`.

----

.. _class_Graph_method__create_vertex:

- :ref:`Object<class_Object>` **_create_vertex** **(** **)** |virtual|

Must return an instance of :ref:`GraphVertex<class_GraphVertex>`.

----

.. _class_Graph_method_add_directed_edge:

- :ref:`GraphEdge<class_GraphEdge>` **add_directed_edge** **(** :ref:`Variant<class_Variant>` from, :ref:`Variant<class_Variant>` to, :ref:`Variant<class_Variant>` value=1.0 **)**

Adds a directed edge between ``a`` and ``b`` vertices. The ``value`` could represent a weight of the edge, or other attributes. The following expressions are *not* equivalent:

::

    graph.has_edge(a, b)  # Prints True
    graph.has_edge(b, a)  # Prints False

----

.. _class_Graph_method_add_edge:

- :ref:`GraphEdge<class_GraphEdge>` **add_edge** **(** :ref:`Variant<class_Variant>` a, :ref:`Variant<class_Variant>` b, :ref:`Variant<class_Variant>` value=1.0 **)**

Adds an undirected (associative) edge between ``a`` and ``b`` vertices. The ``value`` could represent a weight of the edge, or other attributes. The following instructions are equivalent:

::

    graph.has_edge(a, b)  # Prints True
    graph.has_edge(b, a)  # Prints True

----

.. _class_Graph_method_add_vertex:

- :ref:`GraphVertex<class_GraphVertex>` **add_vertex** **(** :ref:`Variant<class_Variant>` value **)**

Adds a new vertex to the graph. The ``value`` represents the data or attribute of that vertex.

----

.. _class_Graph_method_clear:

- void **clear** **(** **)**

Removes all vertices and edges from the graph.

----

.. _class_Graph_method_clear_edges:

- void **clear_edges** **(** **)**

Removes all edges from the graph while retaining all original vertices.

----

.. _class_Graph_method_find_connected_component:

- :ref:`Array<class_Array>` **find_connected_component** **(** :ref:`GraphVertex<class_GraphVertex>` vertex **)**

Returns an array of vertices representing a connected component in an **undirected** graph starting from arbitrary ``vertex`` root.

----

.. _class_Graph_method_find_edge:

- :ref:`GraphEdge<class_GraphEdge>` **find_edge** **(** :ref:`GraphVertex<class_GraphVertex>` a, :ref:`GraphVertex<class_GraphVertex>` b **)** |const|

Returns the first found edge between ``a`` and ``b`` vertices. There may be multiple edges between vertices. If you need to find a specific edge, use :ref:`get_edges<class_Graph_method_get_edges>` instead.

----

.. _class_Graph_method_find_vertex:

- :ref:`GraphVertex<class_GraphVertex>` **find_vertex** **(** :ref:`Variant<class_Variant>` value **)**

Returns the first found vertex that contains a specified value.

----

.. _class_Graph_method_get_connected_components:

- :ref:`Dictionary<class_Dictionary>` **get_connected_components** **(** **)**

Returns a :ref:`Dictionary<class_Dictionary>` of all *connected components* in the graph. The keys consist of a set of vertices called *representatives*, while values contain all *members* :ref:`Array<class_Array>` of vertices of that representative:

::

    var representatives = graph.get_connected_components()
    for r in representatives:
        print("Representative: ", r)
        var members = representatives[r]
        for m in members:
            print("Member: ", m)

All members represent a connected component. A representative is considered as a member of the connected component. A connected component may consist of a single vertex.

----

.. _class_Graph_method_get_edge_count:

- :ref:`int<class_int>` **get_edge_count** **(** **)** |const|

Returns the total number of edges in this graph.

----

.. _class_Graph_method_get_edges:

- :ref:`Array<class_Array>` **get_edges** **(** :ref:`GraphVertex<class_GraphVertex>` a=null, :ref:`GraphVertex<class_GraphVertex>` b=null **)** |const|

Returns a list of :ref:`GraphEdge<class_GraphEdge>`\ s between ``a`` and ``b`` vertices. If both endpoints are ``null``, then the method returns all edges in the graph instead.

----

.. _class_Graph_method_get_vertex_count:

- :ref:`int<class_int>` **get_vertex_count** **(** **)** |const|

Returns the total number of vertices in this graph.

----

.. _class_Graph_method_get_vertices:

- :ref:`Array<class_Array>` **get_vertices** **(** **)** |const|

Returns a list of :ref:`GraphVertex<class_GraphVertex>` elements in this graph.

----

.. _class_Graph_method_has_edge:

- :ref:`bool<class_bool>` **has_edge** **(** :ref:`GraphVertex<class_GraphVertex>` a, :ref:`GraphVertex<class_GraphVertex>` b **)** |const|

Returns whether any edge exists between ``a`` and ``b`` vertices.

----

.. _class_Graph_method_has_vertex:

- :ref:`bool<class_bool>` **has_vertex** **(** :ref:`GraphVertex<class_GraphVertex>` vertex **)** |const|

Returns whether the graph contains the specified vertex.

----

.. _class_Graph_method_is_strongly_connected:

- :ref:`bool<class_bool>` **is_strongly_connected** **(** **)**

Returns ``true`` if there exist at least one path connecting any two vertices. Applies both to undirected and directed graphs.

----

.. _class_Graph_method_minimum_spanning_tree:

- :ref:`Array<class_Array>` **minimum_spanning_tree** **(** **)** |const|

Returns a minimum spanning tree (MST) of this graph using Kruskal's algorithm. An MST is represented as an :ref:`Array<class_Array>` of :ref:`GraphEdge<class_GraphEdge>`\ s in this graph, from which you can create a new ``Graph``, if you need to.

The :ref:`GraphEdge.value<class_GraphEdge_property_value>` is interpreted as a :ref:`float<class_float>` weight, which is up to you to define.

In order to obtain a *maximum spanning tree*, you can inverse the weights, for example:

::

    var a = graph.add_vertex(Vector2(0, 0))
    var b = graph.add_vertex(Vector2(100, 100))
    var w = a.value.distance_to(b.value) # Euclidean distance.
    graph.add_edge(a, b, -w) # Notice negative weight.

\ **Note:** there may exist several MSTs if some edges have equal weight. If weights are not configured, the method will eliminate all edges that cause cycles (a tree is an acyclic graph).

----

.. _class_Graph_method_remove_edge:

- void **remove_edge** **(** :ref:`GraphEdge<class_GraphEdge>` edge **)**

Removes an edge from the graph. If the graph is simple, you could find an edge with :ref:`find_edge<class_Graph_method_find_edge>` first, and then remove it.

Alternatively, you can also remove the edge by calling :ref:`Object.free<class_Object_method_free>` on it.

----

.. _class_Graph_method_remove_vertex:

- void **remove_vertex** **(** :ref:`GraphVertex<class_GraphVertex>` vertex **)**

Removes the specified vertex from the graph. All edges that are connected to the vertex will be automatically deleted.

Alternatively, you can also remove the vertex by calling :ref:`Object.free<class_Object_method_free>` on it.

----

.. _class_Graph_method_set_iterator_bfs:

- void **set_iterator_bfs** **(** **)**

Use breadth-first search iterator.

----

.. _class_Graph_method_set_iterator_dfs:

- void **set_iterator_dfs** **(** **)**

Use depth-first search iterator (default).

----

.. _class_Graph_method_shortest_path_tree:

- :ref:`Dictionary<class_Dictionary>` **shortest_path_tree** **(** :ref:`GraphVertex<class_GraphVertex>` root **)** |const|

Returns a shortest path tree starting at the ``root`` vertex using Dijkstra's algorithm. This solves the Single-Source Shortest Path (SSSP) problem, which allows to find the shortest paths between a given vertex to all other vertices in the graph. The algorithm is structurally equivalent to the breadth-first search, except that this uses a priority queue to choose the next vertex based on :ref:`GraphEdge.value<class_GraphEdge_property_value>` weights interpreted as :ref:`float<class_float>` values. The weight of each edge should not be negative for the Dijkstra's algorithm to work properly.

The tree is represented as a :ref:`Dictionary<class_Dictionary>` containing the following keys:

\ ``backtrace:`` A :ref:`Dictionary<class_Dictionary>` which contains an exhaustive information that allows to reconstruct the shortest path. The keys hold current :ref:`GraphVertex<class_GraphVertex>`, and values contain previous :ref:`GraphVertex<class_GraphVertex>`. Therefore, the shortest path between the source to any other connected vertex can be obtained in the following way:

::

    # Find the shortest path tree starting from the root vertex of interest.
    var root = Random.pick(graph.get_vertices())
    var tree = graph.shortest_path_tree(root)
    
    # Pick any target vertex.
    var current = Random.pick(graph.get_vertices())
    
    # Extract shortest path.
    var shortest_path = []
    while true:
        shortest_path.append(current)
        var previous = tree.backtrace[current]
        if not previous:
            break # Reached source vertex (root).
        current = previous
    
    # Invert the path for source-to-target order.
    shortest_path.invert()

\ ``distance:`` A :ref:`Dictionary<class_Dictionary>` which contains the total distance (sum of edge weights) between source and target. The key is the :ref:`GraphVertex<class_GraphVertex>`, the value is :ref:`float<class_float>`.

\ ``edges:`` An :ref:`Array<class_Array>` of all :ref:`GraphEdge<class_GraphEdge>`\ s reachable from the ``root`` vertex. Since there may be multiple edges between vertices, the edges with the minimum weight are collected only.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
