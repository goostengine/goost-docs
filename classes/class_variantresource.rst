:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the VariantResource.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_VariantResource:

VariantResource
===============

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

A :ref:`Resource<class_Resource>` which holds any :ref:`Variant<class_Variant>` compatible type.

Description
-----------

This class allows to store any :ref:`Variant<class_Variant>` compatible built-in types as a :ref:`Resource<class_Resource>`, such as :ref:`Vector2<class_Vector2>`, :ref:`Dictionary<class_Dictionary>`, :ref:`Array<class_Array>`, and even nested ``VariantResource`` objects themselves. These can be edited in the inspector and saved to disk to be reused throughout the project, as resources are shared between instances by default.

\ ``VariantResource`` is normally edited via the editor inspector, but the :ref:`type<class_VariantResource_property_type>` and ``value`` can be changed via code as well:

::

    var res = VariantResource.new()
    res.value = Vector3(1, 2, 3) # The type is set automatically.
    print(res.value)  # prints (1, 2, 3)
    res.type = TYPE_VECTOR2 # The previous value is converted to a new type.
    print(res.value)  # prints (1, 2)

The conversion logic is mostly equivalent to :ref:`@GDScript.convert<class_@GDScript_method_convert>`, except that the :ref:`@GlobalScope.TYPE_NIL<class_@GlobalScope_constant_TYPE_NIL>` is never automatically converted to other types, and a new empty :ref:`Variant<class_Variant>` is constructed instead.

Properties
----------

+-----------------------------------------------------------------+----------------------------------------------------------------------------------+-------------+
| :ref:`PropertyHint<enum_@GlobalScope_PropertyHint>`             | :ref:`property_hint<class_VariantResource_property_property_hint>`               | ``0``       |
+-----------------------------------------------------------------+----------------------------------------------------------------------------------+-------------+
| :ref:`String<class_String>`                                     | :ref:`property_hint_string<class_VariantResource_property_property_hint_string>` | ``""``      |
+-----------------------------------------------------------------+----------------------------------------------------------------------------------+-------------+
| :ref:`String<class_String>`                                     | :ref:`property_name<class_VariantResource_property_property_name>`               | ``"value"`` |
+-----------------------------------------------------------------+----------------------------------------------------------------------------------+-------------+
| :ref:`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>` | :ref:`property_usage<class_VariantResource_property_property_usage>`             | ``7``       |
+-----------------------------------------------------------------+----------------------------------------------------------------------------------+-------------+
| :ref:`int<class_int>`                                           | :ref:`type<class_VariantResource_property_type>`                                 | ``0``       |
+-----------------------------------------------------------------+----------------------------------------------------------------------------------+-------------+

Methods
-------

+-------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`get_value<class_VariantResource_method_get_value>` **(** **)** |const|                             |
+-------------------------------+----------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_value<class_VariantResource_method_set_value>` **(** :ref:`Variant<class_Variant>` value **)** |
+-------------------------------+----------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_VariantResource_property_property_hint:

- :ref:`PropertyHint<enum_@GlobalScope_PropertyHint>` **property_hint**

+-----------+--------------------------+
| *Default* | ``0``                    |
+-----------+--------------------------+
| *Setter*  | set_property_hint(value) |
+-----------+--------------------------+
| *Getter*  | get_property_hint()      |
+-----------+--------------------------+

Specifies how the value is represented in the editor, one of :ref:`PropertyHint<enum_@GlobalScope_PropertyHint>` values.

----

.. _class_VariantResource_property_property_hint_string:

- :ref:`String<class_String>` **property_hint_string**

+-----------+---------------------------------+
| *Default* | ``""``                          |
+-----------+---------------------------------+
| *Setter*  | set_property_hint_string(value) |
+-----------+---------------------------------+
| *Getter*  | get_property_hint_string()      |
+-----------+---------------------------------+

Configures :ref:`property_hint<class_VariantResource_property_property_hint>`.

----

.. _class_VariantResource_property_property_name:

- :ref:`String<class_String>` **property_name**

+-----------+--------------------------+
| *Default* | ``"value"``              |
+-----------+--------------------------+
| *Setter*  | set_property_name(value) |
+-----------+--------------------------+
| *Getter*  | get_property_name()      |
+-----------+--------------------------+

Specifies the value's property name. By default, the data can be fetched via code by referencing the ``value`` property, but this can be customized. Prefer to use the implicit default ``value`` property, unless you're not sure whether the property's name is customized.

----

.. _class_VariantResource_property_property_usage:

- :ref:`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>` **property_usage**

+-----------+---------------------------+
| *Default* | ``7``                     |
+-----------+---------------------------+
| *Setter*  | set_property_usage(value) |
+-----------+---------------------------+
| *Getter*  | get_property_usage()      |
+-----------+---------------------------+

Specifies how the value should be used throughout the editor and code, a combination of :ref:`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>` values.

----

.. _class_VariantResource_property_type:

- :ref:`int<class_int>` **type**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_type(value) |
+-----------+-----------------+
| *Getter*  | get_type()      |
+-----------+-----------------+

Sets the type of the :ref:`Variant<class_Variant>`, one of the ``TYPE_*`` constants available at :ref:`@GlobalScope<class_@GlobalScope>`, such as :ref:`@GlobalScope.TYPE_INT<class_@GlobalScope_constant_TYPE_INT>`.

Once the type is set, an implicit :ref:`Variant<class_Variant>` ``value`` property is constructed. The ``value`` property can be changed dynamically anytime, and this emits the :ref:`Resource.changed<class_Resource_signal_changed>` signal, which can be connected to other script or engine methods:

::

    extends Node2D
    
    export(VariantResource) var res = VariantResource.new()
    
    func _ready():
        # Whenever the color is changed, redraw the canvas.
        res.connect("changed", self, "update")
        # This emits the "changed" signal above.
        res.value = Color.blue
    
    func _draw():
        if res.type == TYPE_COLOR:
            draw_circle(Vector2(), 100, res.value)

Method Descriptions
-------------------

.. _class_VariantResource_method_get_value:

- :ref:`Variant<class_Variant>` **get_value** **(** **)** |const|

Returns :ref:`Variant<class_Variant>` data associated with this resource. The method is recommended to use over :ref:`Object.get<class_Object_method_get>` as the property's name may be customized with :ref:`property_name<class_VariantResource_property_property_name>`.

----

.. _class_VariantResource_method_set_value:

- void **set_value** **(** :ref:`Variant<class_Variant>` value **)**

Modifies existing value of this resource. The value's type is updated automatically if types differ. The method is recommended to use over :ref:`Object.set<class_Object_method_set>` as the property's name may be customized with :ref:`property_name<class_VariantResource_property_property_name>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
