:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GoostEngine.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GoostEngine:

GoostEngine
===========

**Inherits:** :ref:`Object<class_Object>`

Goost singleton.

Description
-----------

A general-purpose engine singleton. Provides methods which may be global in nature (both in terms of availability and the frequency of use throughout projects), or relating to global scope of other classes. May contain methods closely related to the :ref:`Engine<class_Engine>`.

Tutorials
---------

- `https://goost.readthedocs.io/en/gd3/ <https://goost.readthedocs.io/en/gd3/>`__

Methods
-------

+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`defer_call<class_GoostEngine_method_defer_call>` **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                                           |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`defer_call_unique<class_GoostEngine_method_defer_call_unique>` **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, ... **)** |vararg|                                                                                                             |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_author_info<class_GoostEngine_method_get_author_info>` **(** **)** |const|                                                                                                                                                                                              |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_color_constants<class_GoostEngine_method_get_color_constants>` **(** **)** |const|                                                                                                                                                                                      |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_copyright_info<class_GoostEngine_method_get_copyright_info>` **(** **)** |const|                                                                                                                                                                                        |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`             | :ref:`get_invokes<class_GoostEngine_method_get_invokes>` **(** **)** |const|                                                                                                                                                                                                      |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_license_info<class_GoostEngine_method_get_license_info>` **(** **)** |const|                                                                                                                                                                                            |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`           | :ref:`get_license_text<class_GoostEngine_method_get_license_text>` **(** **)** |const|                                                                                                                                                                                            |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`   | :ref:`get_version_info<class_GoostEngine_method_get_version_info>` **(** **)** |const|                                                                                                                                                                                            |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`InvokeState<class_InvokeState>` | :ref:`invoke<class_GoostEngine_method_invoke>` **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, :ref:`float<class_float>` delay, :ref:`float<class_float>` repeat_rate=-1.0, :ref:`bool<class_bool>` pause_mode_process=true **)**                   |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`InvokeState<class_InvokeState>` | :ref:`invoke_deferred<class_GoostEngine_method_invoke_deferred>` **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, :ref:`float<class_float>` delay, :ref:`float<class_float>` repeat_rate=-1.0, :ref:`bool<class_bool>` pause_mode_process=true **)** |
+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_GoostEngine_method_defer_call:

- void **defer_call** **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, ... **)** |vararg|

Calls the ``method`` on the ``object`` during idle time. Mostly equivalent to :ref:`Object.call_deferred<class_Object_method_call_deferred>`, so prefer to use :ref:`Object.call_deferred<class_Object_method_call_deferred>` unless you need the same behavior along with :ref:`defer_call_unique<class_GoostEngine_method_defer_call_unique>` which uses the same deferring mechanism.

----

.. _class_GoostEngine_method_defer_call_unique:

- void **defer_call_unique** **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, ... **)** |vararg|

Calls the ``method`` on the ``object`` during idle time. Whether a call is unique is determined by the number and type of arguments passed, and any consecutive calls are not scheduled, unlike :ref:`Object.call_deferred<class_Object_method_call_deferred>`.

----

.. _class_GoostEngine_method_get_author_info:

- :ref:`Dictionary<class_Dictionary>` **get_author_info** **(** **)** |const|

Returns Goost author information in a :ref:`Dictionary<class_Dictionary>`.

``lead_developers``    - :ref:`Array<class_Array>` of :ref:`String<class_String>`, lead developer names

``founders``           - :ref:`Array<class_Array>` of :ref:`String<class_String>`, founder names

``project_managers``   - :ref:`Array<class_Array>` of :ref:`String<class_String>`, project manager names

``developers``         - :ref:`Array<class_Array>` of :ref:`String<class_String>`, developer names

----

.. _class_GoostEngine_method_get_color_constants:

- :ref:`Dictionary<class_Dictionary>` **get_color_constants** **(** **)** |const|

Returns a :ref:`Dictionary<class_Dictionary>` of color constants listed in :ref:`Color<class_Color>`, with keys as names and values as actual colors.

::

    # Pick a random color constant.
    static func rand_color_constant():
        var colors = GoostEngine.get_color_constants()
        var name = Random.choice(colors.keys())
        var color = colors[name]
        return color

----

.. _class_GoostEngine_method_get_copyright_info:

- :ref:`Array<class_Array>` **get_copyright_info** **(** **)** |const|

Returns an :ref:`Array<class_Array>` of :ref:`Dictionary<class_Dictionary>` including copyright information.

``name``    - :ref:`String<class_String>`, component name

``parts``   - :ref:`Array<class_Array>` of :ref:`Dictionary<class_Dictionary>` {``files``, ``copyright``, ``license``} describing subsections of the component

----

.. _class_GoostEngine_method_get_invokes:

- :ref:`Array<class_Array>` **get_invokes** **(** **)** |const|

Returns an :ref:`Array<class_Array>` of active :ref:`InvokeState<class_InvokeState>` objects which can be used to track pending method invocations. If any reference to repeating :ref:`InvokeState<class_InvokeState>` is lost, then all such invocations can be cancelled the following way:

::

    for state in GoostEngine.get_invokes():
        if state.is_repeating():
            state.cancel()

----

.. _class_GoostEngine_method_get_license_info:

- :ref:`Dictionary<class_Dictionary>` **get_license_info** **(** **)** |const|

Returns :ref:`Dictionary<class_Dictionary>` of licenses used by Goost and included third-party components.

----

.. _class_GoostEngine_method_get_license_text:

- :ref:`String<class_String>` **get_license_text** **(** **)** |const|

Returns Goost license text.

----

.. _class_GoostEngine_method_get_version_info:

- :ref:`Dictionary<class_Dictionary>` **get_version_info** **(** **)** |const|

Returns the current Goost version information in a Dictionary.

``major``    - Holds the major version number as an int

``minor``    - Holds the minor version number as an int

``patch``    - Holds the patch version number as an int

``hex``      - Holds the full version number encoded as a hexadecimal int with one byte (2 places) per number (see example below)

``status``   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String

``hash``     - Holds the full Git commit hash as a String

``year``     - Holds the year the version was released in as an int

``string``   - ``major`` + ``minor`` + ``patch`` + ``status`` + ``build`` in a single String

**Note: ** This method does not contain the build name as in :ref:`Engine.get_version_info<class_Engine_method_get_version_info>`, since the build name is related to the engine, not the extension. In Goost, the build name is usually overridden to ``"goost"`` value.

----

.. _class_GoostEngine_method_invoke:

- :ref:`InvokeState<class_InvokeState>` **invoke** **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, :ref:`float<class_float>` delay, :ref:`float<class_float>` repeat_rate=-1.0, :ref:`bool<class_bool>` pause_mode_process=true **)**

Schedules a ``method`` on the ``object`` to be called ``delay`` seconds later.

If ``repeat_rate >= 0.0``, then the method is invoked repeatedly every ``repeat_rate`` seconds until it's cancelled manually using :ref:`InvokeState.cancel<class_InvokeState_method_cancel>`. If the object is freed during the wait period, the invocation is cancelled automatically.

If ``pause_mode_process`` is set to ``false``, pausing the :ref:`SceneTree<class_SceneTree>` will also postpone the function from being called until the :ref:`SceneTree<class_SceneTree>` pause state is resumed.

----

.. _class_GoostEngine_method_invoke_deferred:

- :ref:`InvokeState<class_InvokeState>` **invoke_deferred** **(** :ref:`Object<class_Object>` object, :ref:`String<class_String>` method, :ref:`float<class_float>` delay, :ref:`float<class_float>` repeat_rate=-1.0, :ref:`bool<class_bool>` pause_mode_process=true **)**

Same as :ref:`invoke<class_GoostEngine_method_invoke>`, but calls the ``method`` on idle time when the time arrives. This means that the method may not always be invoked exactly after ``delay`` seconds.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
