:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the MixinScript.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MixinScript:

MixinScript
===========

**Inherits:** :ref:`Script<class_Script>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Experimental!** A script which combines several other :ref:`Script<class_Script>` resources to extend object's run-time functionality.

Description
-----------

``MixinScript`` is a :ref:`Script<class_Script>` which allows to simulate a new class by fusing other :ref:`Script<class_Script>` resources into one. ``MixinScript`` is a cross-language implementation of the `Mixin <https://en.wikipedia.org/wiki/Mixin>`__ programming concept.

All objects that use ``MixinScript`` can have properties, methods and signals to be available in the same instance.

Mixin scripts are added either via editor or code using :ref:`add_mixin<class_MixinScript_method_add_mixin>`. All mixin scripts added to ``MixinScript`` must inherit from :ref:`Mixin<class_Mixin>` class. ``MixinScript`` use internal :ref:`Mixin<class_Mixin>` instances to extend the behavior of the owner. You can treat :ref:`Mixin<class_Mixin>` objects as if they were the owners themselves, since all properties, methods and signals are going to be available in the owner at run-time, and are allowed to override virtual methods such as :ref:`Node._ready<class_Node_method__ready>`, even if they don't exist in the :ref:`Mixin<class_Mixin>` class. But do note that some languages like :ref:`GDScript<class_GDScript>` won't be able to provide features like autocompletion, because in most cases, :ref:`Mixin<class_Mixin>` class may not represent the owner's real base class.

If scripts share the same properties, methods or signals, only the first occurrence of those will be used throughout scripts. This means that name conflict resolution is implicit, so you may want to change the order of mixin scripts via editor or using :ref:`move_mixin<class_MixinScript_method_move_mixin>` method at run-time.

Depending on the language, properties, methods and signals may not be directly available in the :ref:`Mixin<class_Mixin>` classes, but an **instance** of the class. Due to the nature of cross-language implementation, those languages might not be aware of the mixin mechanism used by ``MixinScript``, leading to parse errors as seen in :ref:`GDScript<class_GDScript>`.

Properties
----------

+---------------------------+--------------------------------------------------+----------+
| :ref:`Array<class_Array>` | :ref:`mixins<class_MixinScript_property_mixins>` | ``[  ]`` |
+---------------------------+--------------------------------------------------+----------+

Methods
-------

+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                        | :ref:`add_mixin<class_MixinScript_method_add_mixin>` **(** :ref:`Script<class_Script>` script **)**                                       |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                        | :ref:`clear_mixins<class_MixinScript_method_clear_mixins>` **(** **)**                                                                    |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Script<class_Script>` | :ref:`get_mixin<class_MixinScript_method_get_mixin>` **(** :ref:`int<class_int>` index **)** |const|                                      |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`       | :ref:`get_mixin_count<class_MixinScript_method_get_mixin_count>` **(** **)** |const|                                                      |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                        | :ref:`insert_mixin<class_MixinScript_method_insert_mixin>` **(** :ref:`int<class_int>` position, :ref:`Script<class_Script>` script **)** |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                        | :ref:`move_mixin<class_MixinScript_method_move_mixin>` **(** :ref:`int<class_int>` position, :ref:`Script<class_Script>` script **)**     |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                        | :ref:`remove_mixin<class_MixinScript_method_remove_mixin>` **(** :ref:`int<class_int>` index **)**                                        |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+
| void                        | :ref:`set_mixin<class_MixinScript_method_set_mixin>` **(** :ref:`int<class_int>` index, :ref:`Script<class_Script>` script **)**          |
+-----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_MixinScript_property_mixins:

- :ref:`Array<class_Array>` **mixins**

+-----------+-------------------+
| *Default* | ``[  ]``          |
+-----------+-------------------+
| *Setter*  | set_mixins(value) |
+-----------+-------------------+
| *Getter*  | get_mixins()      |
+-----------+-------------------+

An array of all :ref:`Script<class_Script>` mixins used by this script.

Method Descriptions
-------------------

.. _class_MixinScript_method_add_mixin:

- void **add_mixin** **(** :ref:`Script<class_Script>` script **)**

Adds a new script to extend the behavior of the owner.

----

.. _class_MixinScript_method_clear_mixins:

- void **clear_mixins** **(** **)**

Removes all mixins from this script.

----

.. _class_MixinScript_method_get_mixin:

- :ref:`Script<class_Script>` **get_mixin** **(** :ref:`int<class_int>` index **)** |const|

Returns a script at index previously added with :ref:`add_mixin<class_MixinScript_method_add_mixin>`.

----

.. _class_MixinScript_method_get_mixin_count:

- :ref:`int<class_int>` **get_mixin_count** **(** **)** |const|

Returns the total number of scripts in ``MixinScript``.

----

.. _class_MixinScript_method_insert_mixin:

- void **insert_mixin** **(** :ref:`int<class_int>` position, :ref:`Script<class_Script>` script **)**

Inserts a new script at a given position in the array of mixins. The behavior is equivalent to :ref:`Array.insert<class_Array_method_insert>`.

----

.. _class_MixinScript_method_move_mixin:

- void **move_mixin** **(** :ref:`int<class_int>` position, :ref:`Script<class_Script>` script **)**

Moves an existing script to a different position (order) among the other scripts. Since calls, signals, etc are performed in script order, changing the order of scripts may be necessary.

----

.. _class_MixinScript_method_remove_mixin:

- void **remove_mixin** **(** :ref:`int<class_int>` index **)**

Removes an existing script at index. The functionality of the old script will no longer be available in the instance that uses ``MixinScript``.

----

.. _class_MixinScript_method_set_mixin:

- void **set_mixin** **(** :ref:`int<class_int>` index, :ref:`Script<class_Script>` script **)**

Changes the script at index. The functionality of the old script will no longer be available in the instance that uses ``MixinScript``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
