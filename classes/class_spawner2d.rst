:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Spawner2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Spawner2D:

Spawner2D
=========

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Automatically instantiate nodes from scenes in 2D.

Description
-----------

Spawner allows to conveniently instantiate nodes from scenes and scripts automatically into the :ref:`SceneTree<class_SceneTree>`. In order to use it, you need to set :ref:`resource<class_Spawner2D_property_resource>` first. Once ``Spawner2D`` is added to the :ref:`SceneTree<class_SceneTree>`, it will start to create new instances immediately.

The speed and number of nodes instantiated can be controlled by modifying :ref:`rate<class_Spawner2D_property_rate>`, time :ref:`step<class_Spawner2D_property_step>`, and :ref:`limit<class_Spawner2D_property_limit>`. For example, if ``rate = 10``, then ``Spawner2D`` will instantiate **10** nodes per second, or you could modify time :ref:`step<class_Spawner2D_property_step>` and instantiate **10** nodes per minute if ``step = 60``. If you only need to instantiate **10** nodes and stop, then you'd need to set ``limit = 10``. The :ref:`delay<class_Spawner2D_property_delay>` can be configured to create spawn waves and sequences.

The **modify\_\*** properties allow to set transform of spawned nodes according to ``Spawner2D``'s own transform. Depending on the value of :ref:`local<class_Spawner2D_property_local>`, either local or global transform is modified of the nodes that are spawned by ``Spawner2D``.

Properties
----------

+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                      | :ref:`delay<class_Spawner2D_property_delay>`                     | ``0.0``           |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                        | :ref:`enabled<class_Spawner2D_property_enabled>`                 | ``true``          |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`int<class_int>`                          | :ref:`limit<class_Spawner2D_property_limit>`                     | ``0``             |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                        | :ref:`local<class_Spawner2D_property_local>`                     | ``false``         |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                        | :ref:`modify_position<class_Spawner2D_property_modify_position>` | ``true``          |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                        | :ref:`modify_rotation<class_Spawner2D_property_modify_rotation>` | ``true``          |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`                        | :ref:`modify_scale<class_Spawner2D_property_modify_scale>`       | ``true``          |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`ProcessMode<enum_Spawner2D_ProcessMode>` | :ref:`process_mode<class_Spawner2D_property_process_mode>`       | ``1``             |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`int<class_int>`                          | :ref:`rate<class_Spawner2D_property_rate>`                       | ``1``             |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`Resource<class_Resource>`                | :ref:`resource<class_Spawner2D_property_resource>`               |                   |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`NodePath<class_NodePath>`                | :ref:`spawn_path<class_Spawner2D_property_spawn_path>`           | ``NodePath(".")`` |
+------------------------------------------------+------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`                      | :ref:`step<class_Spawner2D_property_step>`                       | ``1.0``           |
+------------------------------------------------+------------------------------------------------------------------+-------------------+

Methods
-------

+-------------------------+--------------------------------------------------------+
| :ref:`Node<class_Node>` | :ref:`spawn<class_Spawner2D_method_spawn>` **(** **)** |
+-------------------------+--------------------------------------------------------+

Signals
-------

.. _class_Spawner2D_signal_finished:

- **finished** **(** **)**

Emitted when the current number of spawned nodes equals to :ref:`limit<class_Spawner2D_property_limit>`.

----

.. _class_Spawner2D_signal_node_spawned:

- **node_spawned** **(** :ref:`Node<class_Node>` node **)**

Emitted when a new node is spawned automatically when :ref:`enabled<class_Spawner2D_property_enabled>` is set to ``true``. The signal is **not** emitted when :ref:`spawn<class_Spawner2D_method_spawn>` is called manually via code.

Enumerations
------------

.. _enum_Spawner2D_ProcessMode:

.. _class_Spawner2D_constant_PROCESS_PHYSICS:

.. _class_Spawner2D_constant_PROCESS_IDLE:

enum **ProcessMode**:

- **PROCESS_PHYSICS** = **0** --- Update the spawner during the physics step at each frame (fixed framerate processing).

- **PROCESS_IDLE** = **1** --- Update the spawner during the idle time at each frame.

Property Descriptions
---------------------

.. _class_Spawner2D_property_delay:

- :ref:`float<class_float>` **delay**

+-----------+------------------+
| *Default* | ``0.0``          |
+-----------+------------------+
| *Setter*  | set_delay(value) |
+-----------+------------------+
| *Getter*  | get_delay()      |
+-----------+------------------+

If ``delay > 0``, then spawning is postponed, otherwise instantiates nodes immediately when setting :ref:`enabled<class_Spawner2D_property_enabled>` to ``true``. Measured in seconds.

----

.. _class_Spawner2D_property_enabled:

- :ref:`bool<class_bool>` **enabled**

+-----------+--------------------+
| *Default* | ``true``           |
+-----------+--------------------+
| *Setter*  | set_enabled(value) |
+-----------+--------------------+
| *Getter*  | is_enabled()       |
+-----------+--------------------+

Starts or stops the spawn process. The state (number of currently spawned objects, spawn time etc.) is reset at all times.

----

.. _class_Spawner2D_property_limit:

- :ref:`int<class_int>` **limit**

+-----------+------------------+
| *Default* | ``0``            |
+-----------+------------------+
| *Setter*  | set_limit(value) |
+-----------+------------------+
| *Getter*  | get_limit()      |
+-----------+------------------+

Limits the number of nodes instantiated. If ``limit == 0``, the number of nodes instantiated is unlimited.

----

.. _class_Spawner2D_property_local:

- :ref:`bool<class_bool>` **local**

+-----------+------------------+
| *Default* | ``false``        |
+-----------+------------------+
| *Setter*  | set_local(value) |
+-----------+------------------+
| *Getter*  | is_local()       |
+-----------+------------------+

If ``true``, spawned nodes will inherit transform from parent node, otherwise transform will not be pushed from parent by setting the spawned node as a top-level using :ref:`CanvasItem.set_as_toplevel<class_CanvasItem_method_set_as_toplevel>`. Disabled by default, as it may cause physics simulation errors if spawned nodes inherit from :ref:`RigidBody2D<class_RigidBody2D>`.

----

.. _class_Spawner2D_property_modify_position:

- :ref:`bool<class_bool>` **modify_position**

+-----------+----------------------------+
| *Default* | ``true``                   |
+-----------+----------------------------+
| *Setter*  | set_modify_position(value) |
+-----------+----------------------------+
| *Getter*  | is_modifying_position()    |
+-----------+----------------------------+

If ``true``, modifies the spawned node's **position** upon spawning from ``Spawner2D``.

----

.. _class_Spawner2D_property_modify_rotation:

- :ref:`bool<class_bool>` **modify_rotation**

+-----------+----------------------------+
| *Default* | ``true``                   |
+-----------+----------------------------+
| *Setter*  | set_modify_rotation(value) |
+-----------+----------------------------+
| *Getter*  | is_modifying_rotation()    |
+-----------+----------------------------+

If ``true``, modifies the spawned node's **rotation** upon spawning from ``Spawner2D``.

----

.. _class_Spawner2D_property_modify_scale:

- :ref:`bool<class_bool>` **modify_scale**

+-----------+-------------------------+
| *Default* | ``true``                |
+-----------+-------------------------+
| *Setter*  | set_modify_scale(value) |
+-----------+-------------------------+
| *Getter*  | is_modifying_scale()    |
+-----------+-------------------------+

If ``true``, modifies the spawned node's **scale** upon spawning from ``Spawner2D``.

----

.. _class_Spawner2D_property_process_mode:

- :ref:`ProcessMode<enum_Spawner2D_ProcessMode>` **process_mode**

+-----------+-------------------------+
| *Default* | ``1``                   |
+-----------+-------------------------+
| *Setter*  | set_process_mode(value) |
+-----------+-------------------------+
| *Getter*  | get_process_mode()      |
+-----------+-------------------------+

Processing mode allows to configure whether the :ref:`spawn<class_Spawner2D_method_spawn>` method is called during idle or physics frame, only applies when :ref:`enabled<class_Spawner2D_property_enabled>` is set to ``true``. See :ref:`ProcessMode<enum_Spawner2D_ProcessMode>`.

----

.. _class_Spawner2D_property_rate:

- :ref:`int<class_int>` **rate**

+-----------+-----------------+
| *Default* | ``1``           |
+-----------+-----------------+
| *Setter*  | set_rate(value) |
+-----------+-----------------+
| *Getter*  | get_rate()      |
+-----------+-----------------+

The number of nodes instantiated per time :ref:`step<class_Spawner2D_property_step>`.

----

.. _class_Spawner2D_property_resource:

- :ref:`Resource<class_Resource>` **resource**

+----------+---------------------+
| *Setter* | set_resource(value) |
+----------+---------------------+
| *Getter* | get_resource()      |
+----------+---------------------+

The resource from which a new node is instantiated. Accepts :ref:`PackedScene<class_PackedScene>` and :ref:`Script<class_Script>` only. If the resource is a :ref:`Script<class_Script>`, make sure that the constructor does not have any **required** parameters, otherwise the instantiation may fail.

----

.. _class_Spawner2D_property_spawn_path:

- :ref:`NodePath<class_NodePath>` **spawn_path**

+-----------+-----------------------+
| *Default* | ``NodePath(".")``     |
+-----------+-----------------------+
| *Setter*  | set_spawn_path(value) |
+-----------+-----------------------+
| *Getter*  | get_spawn_path()      |
+-----------+-----------------------+

The nodes are spawned directly as a child of ``Spawner2D`` by default. Setting this property allows to customize the destination by specifying a different parent node.

----

.. _class_Spawner2D_property_step:

- :ref:`float<class_float>` **step**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_step(value) |
+-----------+-----------------+
| *Getter*  | get_step()      |
+-----------+-----------------+

The :ref:`rate<class_Spawner2D_property_rate>` number of nodes will be spawned each time step. Measured in seconds.

Method Descriptions
-------------------

.. _class_Spawner2D_method_spawn:

- :ref:`Node<class_Node>` **spawn** **(** **)**

Forces an instantiation of a new :ref:`Node<class_Node>` from a :ref:`resource<class_Spawner2D_property_resource>`, even when :ref:`enabled<class_Spawner2D_property_enabled>` is set to ``false``. By default, the new node is added as a child to this one, unless :ref:`spawn_path<class_Spawner2D_property_spawn_path>` is customized.

**Note**: the :ref:`node_spawned<class_Spawner2D_signal_node_spawned>` won't be emitted by calling this function, so if you need to spawn multiple instances from the same :ref:`resource<class_Spawner2D_property_resource>`, you can do so safely during signal emission. If you do need to notify other objects about this event, you can emit the :ref:`node_spawned<class_Spawner2D_signal_node_spawned>` signal manually.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
