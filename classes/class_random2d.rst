:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Random2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Random2D:

Random2D
========

**Inherits:** :ref:`Random<class_Random>` **<** :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Randomization methods in 2D.

Description
-----------

A singleton which provides various randomization methods relating to 2D space.

\ **Note:** ``Random2D`` inherits all the methods from :ref:`Random<class_Random>`, but has a separate global instance and is treated separately from the base one. This means that the seed and the state are not shared between instances by default.

Properties
----------

+-------------------------------+-----------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`direction<class_Random2D_property_direction>` | ``Vector2( 1, 0 )`` |
+-------------------------------+-----------------------------------------------------+---------------------+
| :ref:`float<class_float>`     | :ref:`rotation<class_Random2D_property_rotation>`   | ``6.28319``         |
+-------------------------------+-----------------------------------------------------+---------------------+

Methods
-------

+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`point_in_circle<class_Random2D_method_point_in_circle>` **(** :ref:`float<class_float>` radius_min=0.0, :ref:`float<class_float>` radius_max=1.0 **)** |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`point_in_polygon<class_Random2D_method_point_in_polygon>` **(** :ref:`Variant<class_Variant>` polygon, :ref:`int<class_int>` point_count=1 **)**       |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`point_in_region<class_Random2D_method_point_in_region>` **(** :ref:`Rect2<class_Rect2>` region **)**                                                   |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`point_in_triangle<class_Random2D_method_point_in_triangle>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` triangle **)**                       |
+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_Random2D_property_direction:

- :ref:`Vector2<class_Vector2>` **direction**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 0 )`` |
+-----------+---------------------+
| *Getter*  | get_direction()     |
+-----------+---------------------+

A random normalized direction. Equivalent to :ref:`point_in_circle<class_Random2D_method_point_in_circle>` with minimum and maximum radiuses set to unit length of ``1.0`` and is slightly more efficient. The unit vector can be multiplied by a scalar value.

::

    var radius = 64.0
    var impulse = Random2D.direction * radius

----

.. _class_Random2D_property_rotation:

- :ref:`float<class_float>` **rotation**

+-----------+----------------+
| *Default* | ``6.28319``    |
+-----------+----------------+
| *Getter*  | get_rotation() |
+-----------+----------------+

A random rotation in radians. Ranges from ``0.0`` to :ref:`@GDScript.TAU<class_@GDScript_constant_TAU>`.

Method Descriptions
-------------------

.. _class_Random2D_method_point_in_circle:

- :ref:`Vector2<class_Vector2>` **point_in_circle** **(** :ref:`float<class_float>` radius_min=0.0, :ref:`float<class_float>` radius_max=1.0 **)**

Generates a random point uniformly distributed on the circle's boundary, within the circle's area, or the area confined by inner and outer circle ranges specified with ``radius_min`` and ``radius_max`` parameters.

By default, generates points inside unit circle with radius ``1.0``. If you need random normalized vectors, use :ref:`direction<class_Random2D_property_direction>` instead, which is more efficient to compute.

If ``radius_min == 0``, generates points inside a unit circle, such that :ref:`Geometry.is_point_in_circle<class_Geometry_method_is_point_in_circle>` shall return ``true`` given the same radius.

If ``radius_min != radius_max``, generates points within the ring's area, such that the inner area defined by ``radius_min`` remains unaffected.

If ``radius_min == radius_max``, generates points exactly **on** the circle's boundary, but do note that a point may slightly deviate from the actual circle's boundary due to floating point error accumulation.

::

    var point: Vector2()
    point = Random2D.point_in_circle(1.0, 1.0) # Unit vector.
    point = Random2D.point_in_circle(0.0, 1.0) # Inside a circle.
    point = Random2D.point_in_circle(0.5, 1.0) # Within a ring.

The parameters are not restricted to unit length of ``1.0``.

----

.. _class_Random2D_method_point_in_polygon:

- :ref:`Variant<class_Variant>` **point_in_polygon** **(** :ref:`Variant<class_Variant>` polygon, :ref:`int<class_int>` point_count=1 **)**

Generates a random point distributed within polygon's area. The distribution may not be completely uniform, but should be good enough in most cases. If ``point_count == 1``, returns a single :ref:`Vector2<class_Vector2>` point. If ``point_count > 1``, returns a :ref:`PoolVector2Array<class_PoolVector2Array>` of points, which can be cached for further usage. This improves performance significantly as the polygon must be triangulated first.

This works by first decomposing polygons into triangles with :ref:`PolyDecomp2D.decompose_polygons<class_PolyDecomp2D_method_decompose_polygons>`. For approximately uniform distribution, each triangle is weighted by its area to fetch the needed number of points. Random points are then generated with :ref:`point_in_triangle<class_Random2D_method_point_in_triangle>` uniformly.

Polygons may consist of outer and inner polygons (holes), so the ``polygon`` parameter also accepts an :ref:`Array<class_Array>` of :ref:`PoolVector2Array<class_PoolVector2Array>`\ s as input.

The quality of distribution works better for single polygons with arbitrary number of holes, so it's recommended to use this method on distinct, non-overlapping objects.

----

.. _class_Random2D_method_point_in_region:

- :ref:`Vector2<class_Vector2>` **point_in_region** **(** :ref:`Rect2<class_Rect2>` region **)**

Generates a random point in the area specified by top-left and bottom-right corners of a :ref:`Rect2<class_Rect2>`.

::

    var rect := Rect2(-100, -100, 100, 100) # Position and size.
    var point = Random2D.point_in_region(rect)

----

.. _class_Random2D_method_point_in_triangle:

- :ref:`Vector2<class_Vector2>` **point_in_triangle** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` triangle **)**

Generates a random point **uniformly** distributed within triangle's area.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
