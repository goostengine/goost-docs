:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PolyOffsetParameters2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PolyOffsetParameters2D:

PolyOffsetParameters2D
======================

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

A set of parameters to configure various polygon and polyline deflating and inflating related methods in :ref:`PolyOffset2D<class_PolyOffset2D>`.

Properties
----------

+-------------------------------------------------------+---------------------------------------------------------------------------+----------+
| :ref:`float<class_float>`                             | :ref:`arc_tolerance<class_PolyOffsetParameters2D_property_arc_tolerance>` | ``0.25`` |
+-------------------------------------------------------+---------------------------------------------------------------------------+----------+
| :ref:`EndType<enum_PolyOffsetParameters2D_EndType>`   | :ref:`end_type<class_PolyOffsetParameters2D_property_end_type>`           | ``3``    |
+-------------------------------------------------------+---------------------------------------------------------------------------+----------+
| :ref:`JoinType<enum_PolyOffsetParameters2D_JoinType>` | :ref:`join_type<class_PolyOffsetParameters2D_property_join_type>`         | ``0``    |
+-------------------------------------------------------+---------------------------------------------------------------------------+----------+
| :ref:`float<class_float>`                             | :ref:`miter_limit<class_PolyOffsetParameters2D_property_miter_limit>`     | ``2.0``  |
+-------------------------------------------------------+---------------------------------------------------------------------------+----------+

Enumerations
------------

.. _enum_PolyOffsetParameters2D_JoinType:

.. _class_PolyOffsetParameters2D_constant_JOIN_SQUARE:

.. _class_PolyOffsetParameters2D_constant_JOIN_ROUND:

.. _class_PolyOffsetParameters2D_constant_JOIN_MITER:

enum **JoinType**:

- **JOIN_SQUARE** = **0** --- Squaring is applied uniformly at all convex edge joins at ``1 * delta``.

- **JOIN_ROUND** = **1** --- While flattened paths can never perfectly trace an arc, they are approximated by a series of arc chords.

- **JOIN_MITER** = **2** --- There's a necessary limit to mitered joins since offsetting edges that join at very acute angles will produce excessively long and narrow "spikes". For any given edge join, when miter offsetting would exceed that maximum distance, "square" joining is applied.

----

.. _enum_PolyOffsetParameters2D_EndType:

.. _class_PolyOffsetParameters2D_constant_END_POLYGON:

.. _class_PolyOffsetParameters2D_constant_END_JOINED:

.. _class_PolyOffsetParameters2D_constant_END_BUTT:

.. _class_PolyOffsetParameters2D_constant_END_SQUARE:

.. _class_PolyOffsetParameters2D_constant_END_ROUND:

enum **EndType**:

- **END_POLYGON** = **0** --- Endpoints are joined using one of the ``JOIN_*`` values and the path filled as a polygon.

- **END_JOINED** = **1** --- Endpoints are joined using one of the ``JOIN_*`` values and the path filled as a polyline.

- **END_BUTT** = **2** --- Endpoints are squared off with no extension.

- **END_SQUARE** = **3** --- Endpoints are squared off and extended by ``delta`` units.

- **END_ROUND** = **4** --- Endpoints are rounded off and extended by ``delta`` units.

Property Descriptions
---------------------

.. _class_PolyOffsetParameters2D_property_arc_tolerance:

- :ref:`float<class_float>` **arc_tolerance**

+-----------+--------------------------+
| *Default* | ``0.25``                 |
+-----------+--------------------------+
| *Setter*  | set_arc_tolerance(value) |
+-----------+--------------------------+
| *Getter*  | get_arc_tolerance()      |
+-----------+--------------------------+

The maximum distance the flattened path will deviate from the mathematical representation of an arc. Smaller values will increase smoothness at a cost of performance. Only relevant when :ref:`join_type<class_PolyOffsetParameters2D_property_join_type>` is set to :ref:`JOIN_ROUND<class_PolyOffsetParameters2D_constant_JOIN_ROUND>`.

----

.. _class_PolyOffsetParameters2D_property_end_type:

- :ref:`EndType<enum_PolyOffsetParameters2D_EndType>` **end_type**

+-----------+---------------------+
| *Default* | ``3``               |
+-----------+---------------------+
| *Setter*  | set_end_type(value) |
+-----------+---------------------+
| *Getter*  | get_end_type()      |
+-----------+---------------------+

See ``END_*`` constants in :ref:`EndType<enum_PolyOffsetParameters2D_EndType>`.

----

.. _class_PolyOffsetParameters2D_property_join_type:

- :ref:`JoinType<enum_PolyOffsetParameters2D_JoinType>` **join_type**

+-----------+----------------------+
| *Default* | ``0``                |
+-----------+----------------------+
| *Setter*  | set_join_type(value) |
+-----------+----------------------+
| *Getter*  | get_join_type()      |
+-----------+----------------------+

See ``JOIN_*`` constants in :ref:`JoinType<enum_PolyOffsetParameters2D_JoinType>`.

----

.. _class_PolyOffsetParameters2D_property_miter_limit:

- :ref:`float<class_float>` **miter_limit**

+-----------+------------------------+
| *Default* | ``2.0``                |
+-----------+------------------------+
| *Setter*  | set_miter_limit(value) |
+-----------+------------------------+
| *Getter*  | get_miter_limit()      |
+-----------+------------------------+

The maximum distance in multiples of ``delta`` that vertices can be offset from their original positions before squaring is applied. The default value is 2.0 (twice delta) which is the smallest value that's allowed to avoid generating unacceptably long 'spikes' at very acute angles.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
