:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the MidiPlayer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MidiPlayer:

MidiPlayer
==========

**Inherits:** :ref:`AudioStreamPlayer<class_AudioStreamPlayer>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

A MIDI and SoundFont player class.

Description
-----------

The MidiPlayer class can play MIDI files. It does this using a collection of sounds called SoundFont which was originally invented in the early 1990s by Creative Labs for their SoundBlaser AWE32 sound card. The MIDI specification is even older from 1983.

Although these technologies are old, they are still being used today in music industry because they are incredibly handy. While SoundFont has become less relevant with the development of sampling, MIDI specifically has seen continuous use very with minimal changes to the standard since inception. 

In order to use this class, the node should be added to the scene tree. Create a new :ref:`AudioStreamGenerator<class_AudioStreamGenerator>` via inspector in :ref:`AudioStreamPlayer.stream<class_AudioStreamPlayer_property_stream>` and then load a :ref:`MidiFile<class_MidiFile>` containing a SoundFont should be set to  :ref:`soundfont<class_MidiPlayer_property_soundfont>` and a :ref:`MidiFile<class_MidiFile>` midi song set to :ref:`midi<class_MidiPlayer_property_midi>`. For instance:

::

    func _ready():
        $MidiPlayer.midi = preload("res://moonlight.mid")
        $MidiPlayer.soundfont = preload("res://piano.sf2")
        $MidiPlayer.play()

You can find MIDI songs and General MIDI SoundFonts online. Here are just a few completely free ones that you might want to look for: ``ChoriumRevA.sf2``, ``WeedsGM3.sf2``, ``SGM-V2.01FluidR3_GM.sf2``, ``TimGM6mb.sf2`` (close in sound with the original Sound Blaster soundfont), ``Timbres Of Heaven GM_GS_XG_SFX V 3.0 Final.sf2`` (very high quality). 

It should be possible to play notes via :ref:`InputEventMIDI<class_InputEventMIDI>` as well.

**List of keywords:**

``channel:`` And audio channels (or tracks) is the audio route the sound takes and allows one instrument to play. Multiple channels allow for different instruments to play on top of each other. Channel 10 is always set to Drums and is handled differently. The number of channels depends on implementation most commonly 16. Tiny Sound Font (which MidiPlayer uses) allocates channels dynamically so you can have as many as you want.

``voice:`` A voice is related to a channel except that this is the actual audio you hear. Each channel has a voice called a Channel Voice. Some instruments or sound effects may also use voices. The number of voices depends on the implementation. On a typical instrument can be anywhere from 1 (monophonic) to 64 (polyphonic). Similar to channels, voices are allocated dynamically so you may have as many as you wish. There is a way to hard limit the max voices but hasn't been implemented.

``program:`` A program is the tone quality. Drums has a unique program for playing individual samples, regular notes have a program, many effects have a program. Note that reverb and chorus have not been implemented.

``preset/instrument:`` This is the instrument for example Piano, Harpsichord, etc. It uses various PCM samples mapped to regions of the keyboard. Drums (usually set to channel 10) are special in that each key has a unique sample and the entire instrument is handled by a drum program.

``bank:`` All samples inside a SoundFont are organized in groups called banks. A bank is commonly 128 samples. In practice most SoundFonts define their own internal sample organization.

``note/message:`` Sometimes called message as it represents a note ON/OFF event. This is the note (or key) to play. It must be a value between 0 and 127. A value of 60 is middle C (C4).

``volume/velocity:`` Commonly called velocity. A value of 0.0 means lowest volume (mute) while a value of 1.0 is loudest volume.

Properties
----------

+---------------------------------+---------------------------------------------------------+----------+
| :ref:`bool<class_bool>`         | :ref:`looping<class_MidiPlayer_property_looping>`       | ``true`` |
+---------------------------------+---------------------------------------------------------+----------+
| :ref:`MidiFile<class_MidiFile>` | :ref:`midi<class_MidiPlayer_property_midi>`             |          |
+---------------------------------+---------------------------------------------------------+----------+
| :ref:`float<class_float>`       | :ref:`midi_speed<class_MidiPlayer_property_midi_speed>` | ``1.0``  |
+---------------------------------+---------------------------------------------------------+----------+
| :ref:`MidiFile<class_MidiFile>` | :ref:`soundfont<class_MidiPlayer_property_soundfont>`   |          |
+---------------------------------+---------------------------------------------------------+----------+

Methods
-------

+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`channel_get_pan<class_MidiPlayer_method_channel_get_pan>` **(** :ref:`int<class_int>` channel **)**                                                                                       |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`channel_get_pitchrange<class_MidiPlayer_method_channel_get_pitchrange>` **(** :ref:`int<class_int>` channel **)**                                                                         |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`channel_get_pitchwheel<class_MidiPlayer_method_channel_get_pitchwheel>` **(** :ref:`int<class_int>` channel **)**                                                                         |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`channel_get_preset_bank<class_MidiPlayer_method_channel_get_preset_bank>` **(** :ref:`int<class_int>` channel **)**                                                                       |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`channel_get_preset_index<class_MidiPlayer_method_channel_get_preset_index>` **(** :ref:`int<class_int>` channel **)**                                                                     |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`channel_get_preset_number<class_MidiPlayer_method_channel_get_preset_number>` **(** :ref:`int<class_int>` channel **)**                                                                   |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`channel_get_tuning<class_MidiPlayer_method_channel_get_tuning>` **(** :ref:`int<class_int>` channel **)**                                                                                 |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`channel_get_volume<class_MidiPlayer_method_channel_get_volume>` **(** :ref:`int<class_int>` channel **)**                                                                                 |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_midi_control<class_MidiPlayer_method_channel_midi_control>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` control, :ref:`int<class_int>` value **)**                 |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_note_off<class_MidiPlayer_method_channel_note_off>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` note **)**                                                         |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_note_off_all<class_MidiPlayer_method_channel_note_off_all>` **(** :ref:`int<class_int>` channel **)**                                                                             |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_note_on<class_MidiPlayer_method_channel_note_on>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` note, :ref:`float<class_float>` volume **)**                         |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_bank<class_MidiPlayer_method_channel_set_bank>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` bank **)**                                                         |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`channel_set_bank_preset<class_MidiPlayer_method_channel_set_bank_preset>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` bank, :ref:`int<class_int>` preset **)**             |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_pan<class_MidiPlayer_method_channel_set_pan>` **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` pan **)**                                                        |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_pitchrange<class_MidiPlayer_method_channel_set_pitchrange>` **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` pitchrange **)**                                   |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_pitchwheel<class_MidiPlayer_method_channel_set_pitchwheel>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` pitchwheel **)**                                       |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_preset_index<class_MidiPlayer_method_channel_set_preset_index>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` preset_index **)**                                 |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`channel_set_preset_number<class_MidiPlayer_method_channel_set_preset_number>` **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` preset_number, :ref:`int<class_int>` drums **)** |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_tuning<class_MidiPlayer_method_channel_set_tuning>` **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` tuning **)**                                               |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`channel_set_volume<class_MidiPlayer_method_channel_set_volume>` **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` volume **)**                                               |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>` | :ref:`get_preset_names<class_MidiPlayer_method_get_preset_names>` **(** **)** |const|                                                                                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`note_off<class_MidiPlayer_method_note_off>` **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` note **)**                                                                          |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`note_off_all<class_MidiPlayer_method_note_off_all>` **(** **)**                                                                                                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                          | :ref:`note_on<class_MidiPlayer_method_note_on>` **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` note, :ref:`float<class_float>` volume **)**                                          |
+-----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_MidiPlayer_signal_loop_finished:

- **loop_finished** **(** **)**

Emitted when the MIDI song finishes playing one loop. This signal is emitted only if looping is ``true``.

**Note**: When not looping, a ``finished`` signal is emitted instead and the MidiPlayer will automatically stop itself when reaching the end of the song.

Property Descriptions
---------------------

.. _class_MidiPlayer_property_looping:

- :ref:`bool<class_bool>` **looping**

+-----------+--------------------+
| *Default* | ``true``           |
+-----------+--------------------+
| *Setter*  | set_looping(value) |
+-----------+--------------------+
| *Getter*  | is_looping()       |
+-----------+--------------------+

When set to ``true``, midi file will loop forever.

----

.. _class_MidiPlayer_property_midi:

- :ref:`MidiFile<class_MidiFile>` **midi**

+----------+-----------------+
| *Setter* | set_midi(value) |
+----------+-----------------+
| *Getter* | get_midi()      |
+----------+-----------------+

This is the :ref:`MidiFile<class_MidiFile>` resource that contains the SoundFont data.

----

.. _class_MidiPlayer_property_midi_speed:

- :ref:`float<class_float>` **midi_speed**

+-----------+-----------------------+
| *Default* | ``1.0``               |
+-----------+-----------------------+
| *Setter*  | set_midi_speed(value) |
+-----------+-----------------------+
| *Getter*  | get_midi_speed()      |
+-----------+-----------------------+

Controls the midi file playback speed.

----

.. _class_MidiPlayer_property_soundfont:

- :ref:`MidiFile<class_MidiFile>` **soundfont**

+----------+----------------------+
| *Setter* | set_soundfont(value) |
+----------+----------------------+
| *Getter* | get_soundfont()      |
+----------+----------------------+

This is the :ref:`MidiFile<class_MidiFile>` resource that contains the idi song data.

Method Descriptions
-------------------

.. _class_MidiPlayer_method_channel_get_pan:

- :ref:`float<class_float>` **channel_get_pan** **(** :ref:`int<class_int>` channel **)**

Returns the left-right panning of the specified channel.

----

.. _class_MidiPlayer_method_channel_get_pitchrange:

- :ref:`float<class_float>` **channel_get_pitchrange** **(** :ref:`int<class_int>` channel **)**

Get the pitch range of a channel.

----

.. _class_MidiPlayer_method_channel_get_pitchwheel:

- :ref:`int<class_int>` **channel_get_pitchwheel** **(** :ref:`int<class_int>` channel **)**

Get the pitch wheel value for the specified channel.

----

.. _class_MidiPlayer_method_channel_get_preset_bank:

- :ref:`int<class_int>` **channel_get_preset_bank** **(** :ref:`int<class_int>` channel **)**

Get the preset sample bank for the specified channel.

----

.. _class_MidiPlayer_method_channel_get_preset_index:

- :ref:`int<class_int>` **channel_get_preset_index** **(** :ref:`int<class_int>` channel **)**

Get the preset index for the specified channel.

----

.. _class_MidiPlayer_method_channel_get_preset_number:

- :ref:`int<class_int>` **channel_get_preset_number** **(** :ref:`int<class_int>` channel **)**

Get the preset number for the specified channel.

----

.. _class_MidiPlayer_method_channel_get_tuning:

- :ref:`float<class_float>` **channel_get_tuning** **(** :ref:`int<class_int>` channel **)**

Get the tuning of a channel.

----

.. _class_MidiPlayer_method_channel_get_volume:

- :ref:`float<class_float>` **channel_get_volume** **(** :ref:`int<class_int>` channel **)**

Get the volume of a channel.

----

.. _class_MidiPlayer_method_channel_midi_control:

- void **channel_midi_control** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` control, :ref:`int<class_int>` value **)**

MIDI controls are used to produce specialized effects.

----

.. _class_MidiPlayer_method_channel_note_off:

- void **channel_note_off** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` note **)**

Stop playing a specific note on a specific channel.

----

.. _class_MidiPlayer_method_channel_note_off_all:

- void **channel_note_off_all** **(** :ref:`int<class_int>` channel **)**

Stop all notes on a channel.

----

.. _class_MidiPlayer_method_channel_note_on:

- void **channel_note_on** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` note, :ref:`float<class_float>` volume **)**

Start playing a note on a specific channel.

----

.. _class_MidiPlayer_method_channel_set_bank:

- void **channel_set_bank** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` bank **)**

Defines the bank number for the specified channel. Bank is a collection of sound samples.

----

.. _class_MidiPlayer_method_channel_set_bank_preset:

- :ref:`int<class_int>` **channel_set_bank_preset** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` bank, :ref:`int<class_int>` preset **)**

Defines the bank and preset for a channel.

----

.. _class_MidiPlayer_method_channel_set_pan:

- void **channel_set_pan** **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` pan **)**

Defines left and right panning of a channel.

----

.. _class_MidiPlayer_method_channel_set_pitchrange:

- void **channel_set_pitchrange** **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` pitchrange **)**

The the pitch range  for a channel.

----

.. _class_MidiPlayer_method_channel_set_pitchwheel:

- void **channel_set_pitchwheel** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` pitchwheel **)**

Set the pitch wheel value for a channel.

----

.. _class_MidiPlayer_method_channel_set_preset_index:

- void **channel_set_preset_index** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` preset_index **)**

Set the preset index for a channel.

----

.. _class_MidiPlayer_method_channel_set_preset_number:

- :ref:`int<class_int>` **channel_set_preset_number** **(** :ref:`int<class_int>` channel, :ref:`int<class_int>` preset_number, :ref:`int<class_int>` drums **)**

Set the preset number of a channel. Drums is usually preset 10.

----

.. _class_MidiPlayer_method_channel_set_tuning:

- void **channel_set_tuning** **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` tuning **)**

Set the tuning of a channel. Tuning is a float value between -1.0 and 1.0.

----

.. _class_MidiPlayer_method_channel_set_volume:

- void **channel_set_volume** **(** :ref:`int<class_int>` channel, :ref:`float<class_float>` volume **)**

Set volume of a channel.

----

.. _class_MidiPlayer_method_get_preset_names:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_preset_names** **(** **)** |const|

Returns a list of preset names stored in the SoundFont.

----

.. _class_MidiPlayer_method_note_off:

- void **note_off** **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` note **)**

Stop playing a specific note.

----

.. _class_MidiPlayer_method_note_off_all:

- void **note_off_all** **(** **)**

Stop playing all notes.

----

.. _class_MidiPlayer_method_note_on:

- void **note_on** **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` note, :ref:`float<class_float>` volume **)**

Start playing a single note.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
