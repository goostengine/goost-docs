:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the DebugCapture.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_DebugCapture:

DebugCapture
============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Manages draw state in :ref:`Debug2D<class_Debug2D>`.

Description
-----------

The class is used as a controller for :ref:`Debug2D<class_Debug2D>` which allows to play back draw commands at specified snapshots recorded with :ref:`Debug2D.capture<class_Debug2D_method_capture>`, This is useful for things like visualizing algorithms step-by-step.

For example, you can rewind the drawing using left and right keys:

::

    func _input(event):
        if event.is_action_pressed("ui_left"):
            Debug2D.get_capture().draw_prev()
        elif event.is_action_pressed("ui_right"):
            Debug2D.get_capture().draw_next()

Properties
----------

+-------------------------+-----------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`accumulate<class_DebugCapture_property_accumulate>` |
+-------------------------+-----------------------------------------------------------+

Methods
-------

+-----------------------+-------------------------------------------------------------------------------------+
| void                  | :ref:`draw<class_DebugCapture_method_draw>` **(** :ref:`int<class_int>` index **)** |
+-----------------------+-------------------------------------------------------------------------------------+
| void                  | :ref:`draw_next<class_DebugCapture_method_draw_next>` **(** **)**                   |
+-----------------------+-------------------------------------------------------------------------------------+
| void                  | :ref:`draw_prev<class_DebugCapture_method_draw_prev>` **(** **)**                   |
+-----------------------+-------------------------------------------------------------------------------------+
| :ref:`int<class_int>` | :ref:`get_count<class_DebugCapture_method_get_count>` **(** **)**                   |
+-----------------------+-------------------------------------------------------------------------------------+
| void                  | :ref:`reset<class_DebugCapture_method_reset>` **(** **)**                           |
+-----------------------+-------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_DebugCapture_property_accumulate:

- :ref:`bool<class_bool>` **accumulate**

+----------+-----------------------+
| *Setter* | set_accumulate(value) |
+----------+-----------------------+
| *Getter* | is_accumulating()     |
+----------+-----------------------+

If ``true``, the drawing canvas won't be cleared. Set this to ``false`` if you need to draw each snapshot individually.

Method Descriptions
-------------------

.. _class_DebugCapture_method_draw:

- void **draw** **(** :ref:`int<class_int>` index **)**

Draws a specific snapshot at index.

----

.. _class_DebugCapture_method_draw_next:

- void **draw_next** **(** **)**

Draws a next snapshot.

----

.. _class_DebugCapture_method_draw_prev:

- void **draw_prev** **(** **)**

Draws a previous snapshot.

----

.. _class_DebugCapture_method_get_count:

- :ref:`int<class_int>` **get_count** **(** **)**

Return the number of draw snapshots previously captured with :ref:`Debug2D.capture<class_Debug2D_method_capture>`.

----

.. _class_DebugCapture_method_reset:

- void **reset** **(** **)**

Makes :ref:`Debug2D<class_Debug2D>` to draw all snapshots if :ref:`accumulate<class_DebugCapture_property_accumulate>` is ``true``, otherwise only the first snapshot will be drawn.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
