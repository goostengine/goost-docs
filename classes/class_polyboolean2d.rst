:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PolyBoolean2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PolyBoolean2D:

PolyBoolean2D
=============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Polygon and polyline boolean operations.

Description
-----------

A singleton which provides various "polygon vs. polygon" and "polyline vs. polygon" methods.

A new local instance must be created manually with :ref:`new_instance<class_PolyBoolean2D_method_new_instance>` method if you need to override the default :ref:`parameters<class_PolyBoolean2D_property_parameters>`, else the methods in this class are available globally:

::

    var polygons = []
    # Globally.
    polygons = PolyBoolean2D.merge_polygons([poly_a, poly_b])
    # Locally.
    var pb = PolyBoolean2D.new_instance()
    pb.parameters.strictly_simple = true
    polygons = pb.merge_polygons([poly_a, poly_b])

Properties
----------

+---------------------------------------------------------------+------------------------------------------------------------+
| :ref:`PolyBooleanParameters2D<class_PolyBooleanParameters2D>` | :ref:`parameters<class_PolyBoolean2D_property_parameters>` |
+---------------------------------------------------------------+------------------------------------------------------------+

Methods
-------

+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`boolean_polygons<class_PolyBoolean2D_method_boolean_polygons>` **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b, :ref:`Operation<enum_PolyBoolean2D_Operation>` operation **)** |const|           |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PolyNode2D<class_PolyNode2D>` | :ref:`boolean_polygons_tree<class_PolyBoolean2D_method_boolean_polygons_tree>` **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b, :ref:`Operation<enum_PolyBoolean2D_Operation>` operation **)** |const| |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`clip_polygons<class_PolyBoolean2D_method_clip_polygons>` **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b **)** |const|                                                                           |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`clip_polylines_with_polygons<class_PolyBoolean2D_method_clip_polylines_with_polygons>` **(** :ref:`Array<class_Array>` polylines, :ref:`Array<class_Array>` polygons **)** |const|                                                |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`exclude_polygons<class_PolyBoolean2D_method_exclude_polygons>` **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b **)** |const|                                                                     |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`intersect_polygons<class_PolyBoolean2D_method_intersect_polygons>` **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b **)** |const|                                                                 |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`intersect_polylines_with_polygons<class_PolyBoolean2D_method_intersect_polylines_with_polygons>` **(** :ref:`Array<class_Array>` polylines, :ref:`Array<class_Array>` polygons **)** |const|                                      |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`merge_polygons<class_PolyBoolean2D_method_merge_polygons>` **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b=null **)** |const|                                                                    |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Reference<class_Reference>`   | :ref:`new_instance<class_PolyBoolean2D_method_new_instance>` **(** **)** |const|                                                                                                                                                        |
+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_PolyBoolean2D_Operation:

.. _class_PolyBoolean2D_constant_OP_NONE:

.. _class_PolyBoolean2D_constant_OP_UNION:

.. _class_PolyBoolean2D_constant_OP_DIFFERENCE:

.. _class_PolyBoolean2D_constant_OP_INTERSECTION:

.. _class_PolyBoolean2D_constant_OP_XOR:

enum **Operation**:

- **OP_NONE** = **0** --- No-op, but may perform polygons fixup, build hierarchy, depending on the poly_boolean implementation.

- **OP_UNION** = **1** --- Merge (combine) polygons.

- **OP_DIFFERENCE** = **2** --- Clip (cut) polygons or polylines.

- **OP_INTERSECTION** = **3** --- Intersect polygons or polylines.

- **OP_XOR** = **4** --- Mutually exclude polygons.

Property Descriptions
---------------------

.. _class_PolyBoolean2D_property_parameters:

- :ref:`PolyBooleanParameters2D<class_PolyBooleanParameters2D>` **parameters**

+----------+-----------------------+
| *Setter* | set_parameters(value) |
+----------+-----------------------+
| *Getter* | get_parameters()      |
+----------+-----------------------+

Parameters to configure the default behavior of operations. Cannot be configured via the global instance, use :ref:`new_instance<class_PolyBoolean2D_method_new_instance>` first if you need to override the defaults.

Method Descriptions
-------------------

.. _class_PolyBoolean2D_method_boolean_polygons:

- :ref:`Array<class_Array>` **boolean_polygons** **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b, :ref:`Operation<enum_PolyBoolean2D_Operation>` operation **)** |const|

Performs a boolean operation between an array of polygons, with the ``polygons_a`` acting as the *subject* of the operation. Returns an array of resulting polygons with vertices in either clockwise or counterclockwise order, which determines whether a polygon is an outer polygon (boundary) or an inner polygon (hole). The orientation of returned polygons can be checked with :ref:`Geometry.is_polygon_clockwise<class_Geometry_method_is_polygon_clockwise>`. If you need to retain the hierarchy of nested outer and inner polygons, use :ref:`boolean_polygons_tree<class_PolyBoolean2D_method_boolean_polygons_tree>` instead.

\ **Operations:**\ 

\ :ref:`OP_UNION<class_PolyBoolean2D_constant_OP_UNION>`:

Merges polygons into one if they overlap in any way. Passing ``polygons_b`` is optional in this case, but you can specify a different :ref:`PolyBooleanParameters2D.clip_fill_rule<class_PolyBooleanParameters2D_property_clip_fill_rule>` for these polygons, producing different results.

This operation can also be used to convert arbitrary polygons into strictly simple ones (no self-intersections).

\ :ref:`OP_DIFFERENCE<class_PolyBoolean2D_constant_OP_DIFFERENCE>`:

Clips polygons, the *subject* remains intact if neither polygons overlap. Returns an empty array if ``polygons_b`` completely covers ``polygons_a``. If ``polygons_b`` are enclosed by ``polygons_a``, returns an array of boundary and hole polygons.

\ :ref:`OP_INTERSECTION<class_PolyBoolean2D_constant_OP_INTERSECTION>`:

Intersects polygons, effectively returning the common area shared by these polygons. Returns an empty array if no intersection occurs.

\ :ref:`@GlobalScope.OP_XOR<class_@GlobalScope_constant_OP_XOR>`:

Mutually excludes common area defined by the intersection of the polygons. In other words, returns all but common area between the polygons.

----

.. _class_PolyBoolean2D_method_boolean_polygons_tree:

- :ref:`PolyNode2D<class_PolyNode2D>` **boolean_polygons_tree** **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b, :ref:`Operation<enum_PolyBoolean2D_Operation>` operation **)** |const|

Similar to :ref:`boolean_polygons<class_PolyBoolean2D_method_boolean_polygons>`, but builds an hierarchy of clipped polygons and returns a top-level root node representing the tree of polygons, which has some performance cost. Whether a polygon is an outer or an inner path can be checked with :ref:`PolyNode2D.is_inner<class_PolyNode2D_method_is_inner>` more easily and effectively compared to calculating polygon area to determine orientation, see :ref:`GoostGeometry2D.polygon_area<class_GoostGeometry2D_method_polygon_area>`.

----

.. _class_PolyBoolean2D_method_clip_polygons:

- :ref:`Array<class_Array>` **clip_polygons** **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b **)** |const|

Similar to :ref:`boolean_polygons<class_PolyBoolean2D_method_boolean_polygons>`, but performs :ref:`OP_DIFFERENCE<class_PolyBoolean2D_constant_OP_DIFFERENCE>` between the polygons specifically.

----

.. _class_PolyBoolean2D_method_clip_polylines_with_polygons:

- :ref:`Array<class_Array>` **clip_polylines_with_polygons** **(** :ref:`Array<class_Array>` polylines, :ref:`Array<class_Array>` polygons **)** |const|

Clips multiple polylines against polygons and returns an array of clipped polylines. This performs :ref:`OP_DIFFERENCE<class_PolyBoolean2D_constant_OP_DIFFERENCE>` between the polylines and the polygons. Returns an empty array if polygons completely enclose polylines.

----

.. _class_PolyBoolean2D_method_exclude_polygons:

- :ref:`Array<class_Array>` **exclude_polygons** **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b **)** |const|

Similar to :ref:`boolean_polygons<class_PolyBoolean2D_method_boolean_polygons>`, but performs :ref:`@GlobalScope.OP_XOR<class_@GlobalScope_constant_OP_XOR>` between the polygons specifically.

----

.. _class_PolyBoolean2D_method_intersect_polygons:

- :ref:`Array<class_Array>` **intersect_polygons** **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b **)** |const|

Similar to :ref:`boolean_polygons<class_PolyBoolean2D_method_boolean_polygons>`, but performs :ref:`OP_INTERSECTION<class_PolyBoolean2D_constant_OP_INTERSECTION>` between the polygons specifically.

----

.. _class_PolyBoolean2D_method_intersect_polylines_with_polygons:

- :ref:`Array<class_Array>` **intersect_polylines_with_polygons** **(** :ref:`Array<class_Array>` polylines, :ref:`Array<class_Array>` polygons **)** |const|

Intersects multiple polylines with polygons and returns an array of intersected polylines. This performs :ref:`OP_INTERSECTION<class_PolyBoolean2D_constant_OP_INTERSECTION>` between the polylines and the polygons.

----

.. _class_PolyBoolean2D_method_merge_polygons:

- :ref:`Array<class_Array>` **merge_polygons** **(** :ref:`Array<class_Array>` polygons_a, :ref:`Array<class_Array>` polygons_b=null **)** |const|

Similar to :ref:`boolean_polygons<class_PolyBoolean2D_method_boolean_polygons>`, but performs :ref:`OP_UNION<class_PolyBoolean2D_constant_OP_UNION>` between the polygons specifically. The second parameter is optional.

----

.. _class_PolyBoolean2D_method_new_instance:

- :ref:`Reference<class_Reference>` **new_instance** **(** **)** |const|

Instantiates a new local ``PolyBoolean2D`` instance, and :ref:`parameters<class_PolyBoolean2D_property_parameters>` can be configured.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
