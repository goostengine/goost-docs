:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GoostMath.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GoostMath:

GoostMath
=========

**Inherits:** :ref:`Object<class_Object>`

Math functions.

Description
-----------

The singleton which provides various mathematical functions.

Methods
-------

+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`bezier<class_GoostMath_method_bezier>` **(** :ref:`Variant<class_Variant>` a, :ref:`Variant<class_Variant>` ac, :ref:`Variant<class_Variant>` bc, :ref:`Variant<class_Variant>` b, :ref:`float<class_float>` weight **)**           |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`catmull_rom<class_GoostMath_method_catmull_rom>` **(** :ref:`Variant<class_Variant>` ac, :ref:`Variant<class_Variant>` a, :ref:`Variant<class_Variant>` b, :ref:`Variant<class_Variant>` bc, :ref:`float<class_float>` weight **)** |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_between<class_GoostMath_method_is_between>` **(** :ref:`float<class_float>` s, :ref:`float<class_float>` a, :ref:`float<class_float>` b **)**                                                                                    |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_equal_approx<class_GoostMath_method_is_equal_approx>` **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b, :ref:`float<class_float>` tolerance=1e-06 **)**                                                            |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_in_range<class_GoostMath_method_is_in_range>` **(** :ref:`float<class_float>` s, :ref:`float<class_float>` min, :ref:`float<class_float>` max **)**                                                                              |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`is_zero_approx<class_GoostMath_method_is_zero_approx>` **(** :ref:`float<class_float>` s, :ref:`float<class_float>` tolerance=1e-06 **)**                                                                                           |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`log<class_GoostMath_method_log>` **(** :ref:`float<class_float>` x, :ref:`float<class_float>` base=2.71828 **)**                                                                                                                    |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`log10<class_GoostMath_method_log10>` **(** :ref:`float<class_float>` x **)**                                                                                                                                                        |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`     | :ref:`log2<class_GoostMath_method_log2>` **(** :ref:`float<class_float>` x **)**                                                                                                                                                          |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_GoostMath_method_bezier:

- :ref:`Variant<class_Variant>` **bezier** **(** :ref:`Variant<class_Variant>` a, :ref:`Variant<class_Variant>` ac, :ref:`Variant<class_Variant>` bc, :ref:`Variant<class_Variant>` b, :ref:`float<class_float>` weight **)**

Interpolates a cubic Bézier curve between the four control points ``a``, ``ac``, ``bc``, ``b``. Points ``ac`` and ``bc`` provide directional information, and the distance between these points determines how fast the curve moves towards ``ac`` before turning towards ``bc``.

The following types are supported: :ref:`float<class_float>`, :ref:`Vector2<class_Vector2>`, :ref:`Vector3<class_Vector3>`.

----

.. _class_GoostMath_method_catmull_rom:

- :ref:`Variant<class_Variant>` **catmull_rom** **(** :ref:`Variant<class_Variant>` ac, :ref:`Variant<class_Variant>` a, :ref:`Variant<class_Variant>` b, :ref:`Variant<class_Variant>` bc, :ref:`float<class_float>` weight **)**

Interpolates a centripetal Catmull–Rom spline between the four control points ``ac``, ``a``, ``b``, ``bc``.  Points ``ac`` and ``bc`` provide directional information, and the interpolated values lie between ``a`` and ``b`` points.

The following types are supported: :ref:`float<class_float>`, :ref:`Vector2<class_Vector2>`, :ref:`Vector3<class_Vector3>`.

----

.. _class_GoostMath_method_is_between:

- :ref:`bool<class_bool>` **is_between** **(** :ref:`float<class_float>` s, :ref:`float<class_float>` a, :ref:`float<class_float>` b **)**

Returns ``true`` if ``s`` lies between ``a`` and ``b`` values. Here, "between" means that ``s`` lies within the range of ``[a, b]`` **or** ``[b, a]`` ranges, so ``a`` and ``b`` should not be seen as min and max values, but rather as two extremes of the range. To prevent this, use :ref:`is_in_range<class_GoostMath_method_is_in_range>` instead.

Values are compared using non-strict inequality. If ``a`` and ``b`` are the same, then ``s`` will still return ``true`` if ``s`` equals to ``a`` and ``b``.

----

.. _class_GoostMath_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b, :ref:`float<class_float>` tolerance=1e-06 **)**

Returns ``true`` if ``a`` and ``b`` are approximately equal to each other.

Here, approximately equal means that ``a`` and ``b`` are within ``tolerance`` of each other.

Infinity values of the same sign are considered equal.

----

.. _class_GoostMath_method_is_in_range:

- :ref:`bool<class_bool>` **is_in_range** **(** :ref:`float<class_float>` s, :ref:`float<class_float>` min, :ref:`float<class_float>` max **)**

Returns ``true`` if ``s`` is in the range of ``min`` and ``max`` values. If ``min > max``, the range is considered invalid and an error is printed. To prevent this, use :ref:`is_between<class_GoostMath_method_is_between>` instead.

Values are compared using non-strict inequality. If ``min`` and ``max`` are the same, then ``s`` will still return ``true`` if ``s`` equals to ``min`` and ``max``.

----

.. _class_GoostMath_method_is_zero_approx:

- :ref:`bool<class_bool>` **is_zero_approx** **(** :ref:`float<class_float>` s, :ref:`float<class_float>` tolerance=1e-06 **)**

Returns ``true`` if ``s`` is zero or almost zero.

This method is faster than using :ref:`is_equal_approx<class_GoostMath_method_is_equal_approx>` with one value as zero.

----

.. _class_GoostMath_method_log:

- :ref:`float<class_float>` **log** **(** :ref:`float<class_float>` x, :ref:`float<class_float>` base=2.71828 **)**

Computes logarithm of ``x`` with arbitrary base. If ``base`` is not specified, returns natural logarithm of ``x``.

----

.. _class_GoostMath_method_log10:

- :ref:`float<class_float>` **log10** **(** :ref:`float<class_float>` x **)**

Computes common logarithm of ``x``.

----

.. _class_GoostMath_method_log2:

- :ref:`float<class_float>` **log2** **(** :ref:`float<class_float>` x **)**

Computes binary logarithm of ``x``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
