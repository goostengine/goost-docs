:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GoostImage.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GoostImage:

GoostImage
==========

**Inherits:** :ref:`Object<class_Object>`

An :ref:`Image<class_Image>` processing, analysis and utility singleton.

Description
-----------

A singleton which handles various :ref:`Image<class_Image>` processing and analysis tasks. Most methods accept an image as an input.

Tutorials
---------

- `https://goost.readthedocs.io/en/gd3/components/image_processing/index.html <https://goost.readthedocs.io/en/gd3/components/image_processing/index.html>`__

Methods
-------

+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`binarize<class_GoostImage_method_binarize>` **(** :ref:`Image<class_Image>` image, :ref:`float<class_float>` threshold=-1, :ref:`bool<class_bool>` invert=false **)**                                                                                                                           |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`     | :ref:`bucket_fill<class_GoostImage_method_bucket_fill>` **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` at, :ref:`Color<class_Color>` fill_color, :ref:`bool<class_bool>` fill_image=true, :ref:`Connectivity<enum_GoostImage_Connectivity>` connectivity=0 **)**                |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`dilate<class_GoostImage_method_dilate>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` kernel_size=3 **)**                                                                                                                                                                        |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`erode<class_GoostImage_method_erode>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` kernel_size=3 **)**                                                                                                                                                                          |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`get_centroid<class_GoostImage_method_get_centroid>` **(** :ref:`Image<class_Image>` image **)**                                                                                                                                                                                                 |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`     | :ref:`get_pixel_average<class_GoostImage_method_get_pixel_average>` **(** :ref:`Image<class_Image>` image, :ref:`Rect2<class_Rect2>` rect=Rect2( 0, 0, 0, 0 ), :ref:`Image<class_Image>` mask=null **)**                                                                                              |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`get_pixel_or_null<class_GoostImage_method_get_pixel_or_null>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` x, :ref:`int<class_int>` y **)**                                                                                                                                     |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>` | :ref:`get_pixelv_or_null<class_GoostImage_method_get_pixelv_or_null>` **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` pos **)**                                                                                                                                                  |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_pixel<class_GoostImage_method_has_pixel>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` x, :ref:`int<class_int>` y **)**                                                                                                                                                     |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`       | :ref:`has_pixelv<class_GoostImage_method_has_pixelv>` **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` pos **)**                                                                                                                                                                  |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`morph<class_GoostImage_method_morph>` **(** :ref:`Image<class_Image>` image, :ref:`MorphOperation<enum_GoostImage_MorphOperation>` operation, :ref:`Vector2<class_Vector2>` kernel_size=Vector2( 3, 3 ) **)**                                                                                   |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`     | :ref:`render_polygon<class_GoostImage_method_render_polygon>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`bool<class_bool>` fill=false, :ref:`Color<class_Color>` foreground_color=Color( 1, 1, 1, 1 ), :ref:`Color<class_Color>` background_color=Color( 0, 0, 0, 0 ) **)** |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`     | :ref:`render_svg<class_GoostImage_method_render_svg>` **(** :ref:`String<class_String>` svg_document, :ref:`float<class_float>` scale=1.0 **)**                                                                                                                                                       |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`     | :ref:`repeat<class_GoostImage_method_repeat>` **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` count, :ref:`WrapMode<enum_GoostImage_WrapMode>` wrap_mode=0, :ref:`Vector2<class_Vector2>` max_size=Vector2( 16384, 16384 ) **)**                                                 |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`replace_color<class_GoostImage_method_replace_color>` **(** :ref:`Image<class_Image>` image, :ref:`Color<class_Color>` color, :ref:`Color<class_Color>` with_color **)**                                                                                                                        |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`resize_hqx<class_GoostImage_method_resize_hqx>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` scale=2 **)**                                                                                                                                                                      |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`rotate<class_GoostImage_method_rotate>` **(** :ref:`Image<class_Image>` image, :ref:`float<class_float>` angle, :ref:`bool<class_bool>` expand=true **)**                                                                                                                                       |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`rotate_180<class_GoostImage_method_rotate_180>` **(** :ref:`Image<class_Image>` image **)**                                                                                                                                                                                                     |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`rotate_90<class_GoostImage_method_rotate_90>` **(** :ref:`Image<class_Image>` image, :ref:`Direction<enum_GoostImage_Direction>` direction **)**                                                                                                                                                |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Image<class_Image>`     | :ref:`tile<class_GoostImage_method_tile>` **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` size, :ref:`WrapMode<enum_GoostImage_WrapMode>` wrap_mode=0 **)**                                                                                                                      |
+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_GoostImage_Connectivity:

.. _class_GoostImage_constant_FOUR_CONNECTED:

.. _class_GoostImage_constant_EIGHT_CONNECTED:

enum **Connectivity**:

- **FOUR_CONNECTED** = **0** --- Describes the Neumann neighborhood.

- **EIGHT_CONNECTED** = **1** --- Describes the Moore neighborhood.

----

.. _enum_GoostImage_MorphOperation:

.. _class_GoostImage_constant_MORPH_DILATE:

.. _class_GoostImage_constant_MORPH_ERODE:

.. _class_GoostImage_constant_MORPH_OPEN:

.. _class_GoostImage_constant_MORPH_CLOSE:

enum **MorphOperation**:

- **MORPH_DILATE** = **0** --- Causes bright regions within an image to grow.

- **MORPH_ERODE** = **1** --- Causes bright regions within an image to shrink.

- **MORPH_OPEN** = **2** --- Erosion followed by dilation. Useful for removing noise.

- **MORPH_CLOSE** = **3** --- Dilation followed by erosion. Useful for closing small holes inside the foreground objects.

----

.. _enum_GoostImage_Direction:

.. _class_GoostImage_constant_CW:

.. _class_GoostImage_constant_CCW:

enum **Direction**:

- **CW** = **1** --- Clockwise direction or orientation.

- **CCW** = **-1** --- Counterclockwise (a.k.a. Anticlockwise) direction or orientation.

----

.. _enum_GoostImage_WrapMode:

.. _class_GoostImage_constant_TILE:

.. _class_GoostImage_constant_TILE_FLIP_X:

.. _class_GoostImage_constant_TILE_FLIP_Y:

.. _class_GoostImage_constant_TILE_FLIP_XY:

enum **WrapMode**:

- **TILE** = **0** --- Tiles an image over a region by making copies of it. Similar to :ref:`Texture.FLAG_REPEAT<class_Texture_constant_FLAG_REPEAT>`.

- **TILE_FLIP_X** = **1** --- Tiles an image over a region by flipping it horizontally repeatedly.

- **TILE_FLIP_Y** = **2** --- Tiles an image over a region by flipping it vertically repeatedly.

- **TILE_FLIP_XY** = **3** --- Tiles an image over a region by mirroring it both horizontally in vertically. Similar to :ref:`Texture.FLAG_MIRRORED_REPEAT<class_Texture_constant_FLAG_MIRRORED_REPEAT>`.

Method Descriptions
-------------------

.. _class_GoostImage_method_binarize:

- void **binarize** **(** :ref:`Image<class_Image>` image, :ref:`float<class_float>` threshold=-1, :ref:`bool<class_bool>` invert=false **)**

Converts the image into grayscale binary image :ref:`Image.FORMAT_L8<class_Image_constant_FORMAT_L8>`. If the pixel value is smaller than the threshold, it is set to 0, otherwise it is set to a maximum value.

The default threshold of ``-1`` tells the method to apply adaptive threshold, which is determined by analyzing the image for different lighting in different areas.

If ``invert`` is ``true``, flips all values to either zero or one.

----

.. _class_GoostImage_method_bucket_fill:

- :ref:`Image<class_Image>` **bucket_fill** **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` at, :ref:`Color<class_Color>` fill_color, :ref:`bool<class_bool>` fill_image=true, :ref:`Connectivity<enum_GoostImage_Connectivity>` connectivity=0 **)**

Fills the area with a ``fill_color`` confined by other opaque pixels. If ``fill_image`` is ``false``, the filled image chunk shall not overwrite the original image. The filled chunk is returned as another :ref:`Image<class_Image>` in all cases.

:ref:`Connectivity<enum_GoostImage_Connectivity>` specifies the flood fill algorithm. :ref:`FOUR_CONNECTED<class_GoostImage_constant_FOUR_CONNECTED>` allows the filling pixels to go through diagonally placed opaque pixels and is slightly more efficient compared to :ref:`EIGHT_CONNECTED<class_GoostImage_constant_EIGHT_CONNECTED>`.

----

.. _class_GoostImage_method_dilate:

- void **dilate** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` kernel_size=3 **)**

Does image dilation, similar to :ref:`morph<class_GoostImage_method_morph>` with :ref:`MORPH_DILATE<class_GoostImage_constant_MORPH_DILATE>`, but accepts a uniform kernel size.

----

.. _class_GoostImage_method_erode:

- void **erode** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` kernel_size=3 **)**

Does image erosion, similar to :ref:`morph<class_GoostImage_method_morph>` with :ref:`MORPH_ERODE<class_GoostImage_constant_MORPH_ERODE>`, but accepts a uniform kernel size.

----

.. _class_GoostImage_method_get_centroid:

- :ref:`Vector2<class_Vector2>` **get_centroid** **(** :ref:`Image<class_Image>` image **)**

Finds a relative geometrical center within the image.

----

.. _class_GoostImage_method_get_pixel_average:

- :ref:`Color<class_Color>` **get_pixel_average** **(** :ref:`Image<class_Image>` image, :ref:`Rect2<class_Rect2>` rect=Rect2( 0, 0, 0, 0 ), :ref:`Image<class_Image>` mask=null **)**

Returns the average color by averaging each color component. If ``rect`` is not empty, computes the average over the region of the image only. Similarly, an image mask can be specified with opaque pixels acting as a filter of all the pixels of interest. Both the rect and the mask can be used simultaneously.

----

.. _class_GoostImage_method_get_pixel_or_null:

- :ref:`Variant<class_Variant>` **get_pixel_or_null** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` x, :ref:`int<class_int>` y **)**

Returns a :ref:`Color<class_Color>` pixel at specified image coordinates. Returns ``null`` if coordinates lie outside the image boundaries.

----

.. _class_GoostImage_method_get_pixelv_or_null:

- :ref:`Variant<class_Variant>` **get_pixelv_or_null** **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` pos **)**

Same as :ref:`get_pixel_or_null<class_GoostImage_method_get_pixel_or_null>` but accepts :ref:`Vector2<class_Vector2>` for specifying image coordinates.

----

.. _class_GoostImage_method_has_pixel:

- :ref:`bool<class_bool>` **has_pixel** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` x, :ref:`int<class_int>` y **)**

Returns ``true`` if the specified coordinates lie in between image boundaries determined by its size.

----

.. _class_GoostImage_method_has_pixelv:

- :ref:`bool<class_bool>` **has_pixelv** **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` pos **)**

Same as :ref:`has_pixel<class_GoostImage_method_has_pixel>` but uses :ref:`Vector2<class_Vector2>` for specifying image coordinates.

----

.. _class_GoostImage_method_morph:

- void **morph** **(** :ref:`Image<class_Image>` image, :ref:`MorphOperation<enum_GoostImage_MorphOperation>` operation, :ref:`Vector2<class_Vector2>` kernel_size=Vector2( 3, 3 ) **)**

Performs basic image morphing operations. The structuring element (kernel) is a brick, with the origin being implicitly in the center. The width and height of the kernel must be an odd number, but they can differ. The operation does the morphing on each color component separately, which are later combined.

----

.. _class_GoostImage_method_render_polygon:

- :ref:`Image<class_Image>` **render_polygon** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`bool<class_bool>` fill=false, :ref:`Color<class_Color>` foreground_color=Color( 1, 1, 1, 1 ), :ref:`Color<class_Color>` background_color=Color( 0, 0, 0, 0 ) **)**

Renders a binary representation of the polygon as a new image. If ``fill`` is ``true``, fills the interior of the polygon with ``foreground_color`` (white by default), else just renders the polygon's outline alone with the same color. The boundary pixels are always :ref:`FOUR_CONNECTED<class_GoostImage_constant_FOUR_CONNECTED>`. The image ``background_color`` can also be overridden (transparent by default).

----

.. _class_GoostImage_method_render_svg:

- :ref:`Image<class_Image>` **render_svg** **(** :ref:`String<class_String>` svg_document, :ref:`float<class_float>` scale=1.0 **)**

Rasterizes a SVG document as a new image. Any positive scale can be set, as long as the resulting image does not exceed maximum image size determined by :ref:`Image.MAX_WIDTH<class_Image_constant_MAX_WIDTH>` and :ref:`Image.MAX_HEIGHT<class_Image_constant_MAX_HEIGHT>` constants. Returns ``null`` if SVG is corrupt.

In order to render a SVG from a :ref:`File<class_File>`:

::

    var file = File.new()
    file.open("res://icon.svg", File.READ)
    var svg = file.get_as_text()
    var image = GoostImage.render_svg(svg)
    file.close()

**Known limitations:**

This method reuses **nanosvg** implementation bundled with Godot for rendering editor icons and importing simple SVG images, so the functionality may be limited for more complex images.

**Note:** this method is not available in Godot builds with SVG module disabled (enabled by default).

----

.. _class_GoostImage_method_repeat:

- :ref:`Image<class_Image>` **repeat** **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` count, :ref:`WrapMode<enum_GoostImage_WrapMode>` wrap_mode=0, :ref:`Vector2<class_Vector2>` max_size=Vector2( 16384, 16384 ) **)**

Repeats an image in both horizontal and vertical directions several times as determined by the X and Y components of ``count`` respectively. The ``wrap_mode`` specifies how the image is tiled. The ``max_size`` can be overridden to prevent the resulting image from exceeding some size, and the default maximum size is determined by :ref:`Image.MAX_WIDTH<class_Image_constant_MAX_WIDTH>` and :ref:`Image.MAX_HEIGHT<class_Image_constant_MAX_HEIGHT>`. See also :ref:`tile<class_GoostImage_method_tile>`.

----

.. _class_GoostImage_method_replace_color:

- void **replace_color** **(** :ref:`Image<class_Image>` image, :ref:`Color<class_Color>` color, :ref:`Color<class_Color>` with_color **)**

Replaces all occurrences of a given color with another one within the image.

----

.. _class_GoostImage_method_resize_hqx:

- void **resize_hqx** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` scale=2 **)**

Expands the image using HQ2X algorithm with the ``scale`` set to ``2`` or the HQ3X algorithm with the ``scale`` set to ``3``.

See also :ref:`Image.expand_x2_hq2x<class_Image_method_expand_x2_hq2x>`.

----

.. _class_GoostImage_method_rotate:

- void **rotate** **(** :ref:`Image<class_Image>` image, :ref:`float<class_float>` angle, :ref:`bool<class_bool>` expand=true **)**

Rotates the image around its center. The ``angle`` is specified in radians. If ``angle`` is positive, rotates the image in clockwise direction. If ``expand`` is ``true``, the size is expanded to preserve all image details (prevents clipping) given non-orthogonal angles (90, 180, 270 degrees).

::

    # Rotate Godot icon by 45 degrees.
    var texture = preload("res://icon.png")
    var image = texture.get_data()
    GoostImage.rotate(image, deg2rad(45))
    image.save_png("res://icon_rotated.png")

----

.. _class_GoostImage_method_rotate_180:

- void **rotate_180** **(** :ref:`Image<class_Image>` image **)**

Rotates the image by 180 degrees. The result is equivalent to:

::

    image.flip_x()
    image.flip_y()

See :ref:`Image.flip_x<class_Image_method_flip_x>`, :ref:`Image.flip_y<class_Image_method_flip_y>`.

----

.. _class_GoostImage_method_rotate_90:

- void **rotate_90** **(** :ref:`Image<class_Image>` image, :ref:`Direction<enum_GoostImage_Direction>` direction **)**

Rotates the image by 90 degrees in either clockwise or counterclockwise :ref:`Direction<enum_GoostImage_Direction>`. The method performs faster and doesn't lose any image pixel information as opposed to :ref:`rotate<class_GoostImage_method_rotate>` with the ``angle`` parameter set to ``PI / 2``.

----

.. _class_GoostImage_method_tile:

- :ref:`Image<class_Image>` **tile** **(** :ref:`Image<class_Image>` image, :ref:`Vector2<class_Vector2>` size, :ref:`WrapMode<enum_GoostImage_WrapMode>` wrap_mode=0 **)**

Tiles an image in both horizontal and vertical directions over a region limited by ``size`` onto a new image. The ``wrap_mode`` specifies how the image is tiled. See also :ref:`repeat<class_GoostImage_method_repeat>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
