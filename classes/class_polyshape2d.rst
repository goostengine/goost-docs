:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PolyShape2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PolyShape2D:

PolyShape2D
===========

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`PolyCollisionShape2D<class_PolyCollisionShape2D>`

The base class for implementing decomposition or mesh-based classes.

Description
-----------

Takes outlines from :ref:`PolyNode2D<class_PolyNode2D>` added as children of this node and decomposes them into shapes determined by :ref:`build_mode<class_PolyShape2D_property_build_mode>`.

This class is used as a base for classes such as :ref:`PolyCollisionShape2D<class_PolyCollisionShape2D>` and other related mesh-based objects in 2D.

Properties
----------

+----------------------------------------------+----------------------------------------------------------+-------+
| :ref:`BuildMode<enum_PolyShape2D_BuildMode>` | :ref:`build_mode<class_PolyShape2D_property_build_mode>` | ``0`` |
+----------------------------------------------+----------------------------------------------------------+-------+

Methods
-------

+---------------------------+------------------------------------------------------------------------------------+
| void                      | :ref:`_apply_shapes<class_PolyShape2D_method__apply_shapes>` **(** **)** |virtual| |
+---------------------------+------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_shapes<class_PolyShape2D_method_get_shapes>` **(** **)**                 |
+---------------------------+------------------------------------------------------------------------------------+

Signals
-------

.. _class_PolyShape2D_signal_shapes_applied:

- **shapes_applied** **(** **)**

Emitted whenever the shapes are built and applied to some other object. The signal is emitted after :ref:`_apply_shapes<class_PolyShape2D_method__apply_shapes>` is called in all cases, so you don't have to emit the signal manually.

Enumerations
------------

.. _enum_PolyShape2D_BuildMode:

.. _class_PolyShape2D_constant_BUILD_TRIANGLES:

.. _class_PolyShape2D_constant_BUILD_CONVEX:

.. _class_PolyShape2D_constant_BUILD_SEGMENTS:

enum **BuildMode**:

- **BUILD_TRIANGLES** = **0** --- Decomposes outlines into triangle shapes.

- **BUILD_CONVEX** = **1** --- Decomposes outlines into convex shapes.

- **BUILD_SEGMENTS** = **2** --- Filters outlines into outer outlines (mostly used to implement concave shapes).

Property Descriptions
---------------------

.. _class_PolyShape2D_property_build_mode:

- :ref:`BuildMode<enum_PolyShape2D_BuildMode>` **build_mode**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_build_mode(value) |
+-----------+-----------------------+
| *Getter*  | get_build_mode()      |
+-----------+-----------------------+

The mode to build shapes from :ref:`PolyNode2D<class_PolyNode2D>` children.

Method Descriptions
-------------------

.. _class_PolyShape2D_method__apply_shapes:

- void **_apply_shapes** **(** **)** |virtual|

Called whenever :ref:`PolyNode2D<class_PolyNode2D>` outlines are updated, :ref:`PolyNode2D<class_PolyNode2D>` children are added/removed, and when :ref:`build_mode<class_PolyShape2D_property_build_mode>` is changed.

Use :ref:`get_shapes<class_PolyShape2D_method_get_shapes>` to construct new entities such as collision :ref:`Shape2D<class_Shape2D>`\ s from outlines. See also :ref:`PolyCollisionShape2D<class_PolyCollisionShape2D>`.

----

.. _class_PolyShape2D_method_get_shapes:

- :ref:`Array<class_Array>` **get_shapes** **(** **)**

Returns an array of :ref:`PoolVector2Array<class_PoolVector2Array>` polygon outlines previously built from :ref:`build_mode<class_PolyShape2D_property_build_mode>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
