:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PolyBooleanParameters2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PolyBooleanParameters2D:

PolyBooleanParameters2D
=======================

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

A set of parameters to configure various polygon and polyline boolean related methods in :ref:`PolyBoolean2D<class_PolyBoolean2D>`.

Properties
----------

+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+
| :ref:`FillRule<enum_PolyBooleanParameters2D_FillRule>` | :ref:`clip_fill_rule<class_PolyBooleanParameters2D_property_clip_fill_rule>`         | ``1``     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                | :ref:`preserve_collinear<class_PolyBooleanParameters2D_property_preserve_collinear>` | ``false`` |
+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                | :ref:`reverse_solution<class_PolyBooleanParameters2D_property_reverse_solution>`     | ``false`` |
+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                | :ref:`strictly_simple<class_PolyBooleanParameters2D_property_strictly_simple>`       | ``false`` |
+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+
| :ref:`FillRule<enum_PolyBooleanParameters2D_FillRule>` | :ref:`subject_fill_rule<class_PolyBooleanParameters2D_property_subject_fill_rule>`   | ``1``     |
+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                                | :ref:`subject_open<class_PolyBooleanParameters2D_property_subject_open>`             | ``false`` |
+--------------------------------------------------------+--------------------------------------------------------------------------------------+-----------+

Enumerations
------------

.. _enum_PolyBooleanParameters2D_FillRule:

.. _class_PolyBooleanParameters2D_constant_FILL_RULE_EVEN_ODD:

.. _class_PolyBooleanParameters2D_constant_FILL_RULE_NON_ZERO:

.. _class_PolyBooleanParameters2D_constant_FILL_RULE_POSITIVE:

.. _class_PolyBooleanParameters2D_constant_FILL_RULE_NEGATIVE:

enum **FillRule**:

- **FILL_RULE_EVEN_ODD** = **0** --- Odd numbered sub-regions are filled, while even numbered sub-regions are not.

- **FILL_RULE_NON_ZERO** = **1** --- All non-zero sub-regions are filled.

- **FILL_RULE_POSITIVE** = **2** --- All sub-regions with winding counts greater than 0 are filled.

- **FILL_RULE_NEGATIVE** = **3** --- All sub-regions with winding counts less than 0 are filled.

Property Descriptions
---------------------

.. _class_PolyBooleanParameters2D_property_clip_fill_rule:

- :ref:`FillRule<enum_PolyBooleanParameters2D_FillRule>` **clip_fill_rule**

+-----------+---------------------------+
| *Default* | ``1``                     |
+-----------+---------------------------+
| *Setter*  | set_clip_fill_rule(value) |
+-----------+---------------------------+
| *Getter*  | get_clip_fill_rule()      |
+-----------+---------------------------+

The specific :ref:`FillRule<enum_PolyBooleanParameters2D_FillRule>` used for ``polygons_b``.

----

.. _class_PolyBooleanParameters2D_property_preserve_collinear:

- :ref:`bool<class_bool>` **preserve_collinear**

+-----------+-------------------------------+
| *Default* | ``false``                     |
+-----------+-------------------------------+
| *Setter*  | set_preserve_collinear(value) |
+-----------+-------------------------------+
| *Getter*  | is_preserve_collinear()       |
+-----------+-------------------------------+

By default, when three or more vertices are collinear in the input polygons (subject or clip), the "inner" vertices are removed before clipping. If ``true``, prevents this default behavior to allow these inner vertices to appear in the solution.

**Note:** this is only implemented in the **clipper6** backend.

----

.. _class_PolyBooleanParameters2D_property_reverse_solution:

- :ref:`bool<class_bool>` **reverse_solution**

+-----------+-----------------------------+
| *Default* | ``false``                   |
+-----------+-----------------------------+
| *Setter*  | set_reverse_solution(value) |
+-----------+-----------------------------+
| *Getter*  | is_reverse_solution()       |
+-----------+-----------------------------+

If ``true``, inverts the order of vertices in the clipping solution.

**Note:** this is only implemented in the **clipper6** backend.

----

.. _class_PolyBooleanParameters2D_property_strictly_simple:

- :ref:`bool<class_bool>` **strictly_simple**

+-----------+----------------------------+
| *Default* | ``false``                  |
+-----------+----------------------------+
| *Setter*  | set_strictly_simple(value) |
+-----------+----------------------------+
| *Getter*  | is_strictly_simple()       |
+-----------+----------------------------+

If ``true``, ensures that the returned solution are always non self-intersecting polygons that does not contain "touching" vertices nor "touching" edges.

**Note:** it's computationally expensive ensuring polygons are strictly simple in **clipper6** backend so this property is disabled by default. Yet **clipper10** backend always returns strictly simple polygons without performance costs, so this property is ignored there.

----

.. _class_PolyBooleanParameters2D_property_subject_fill_rule:

- :ref:`FillRule<enum_PolyBooleanParameters2D_FillRule>` **subject_fill_rule**

+-----------+------------------------------+
| *Default* | ``1``                        |
+-----------+------------------------------+
| *Setter*  | set_subject_fill_rule(value) |
+-----------+------------------------------+
| *Getter*  | get_subject_fill_rule()      |
+-----------+------------------------------+

The specific :ref:`FillRule<enum_PolyBooleanParameters2D_FillRule>` used for ``polygons_a``.

----

.. _class_PolyBooleanParameters2D_property_subject_open:

- :ref:`bool<class_bool>` **subject_open**

+-----------+-------------------------+
| *Default* | ``false``               |
+-----------+-------------------------+
| *Setter*  | set_subject_open(value) |
+-----------+-------------------------+
| *Getter*  | is_subject_open()       |
+-----------+-------------------------+

If ``true``, the subject paths are treated as open polylines, otherwise they are treated as closed polygons. This property is usually set and overridden automatically, but can be fetched to tell whether the previous operation used polylines for clipping.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
