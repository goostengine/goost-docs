:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Random.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Random:

Random
======

**Inherits:** :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`Random2D<class_Random2D>`

An instance of :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` available at :ref:`@GlobalScope<class_@GlobalScope>`.

Description
-----------

This is a singleton which allows to use :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` methods without instantiating a dedicated object. This means that ``Random`` can be used via script with methods such as :ref:`@GDScript.randi<class_@GDScript_method_randi>`:

::

    Random.randomize() # Time-based.
    Random.seed = hash("Goost") # Manual.
    var i = Random.randi() % 100
    var f = Random.randf_range(-1.0, 1.0)

The class provides other useful convenience methods and properties other than what :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` already provides out of the box.

Local instances must be created with :ref:`new_instance<class_Random_method_new_instance>` method. It's not possible to instantiate a new ``Random`` instance with ``Random.new()`` in GDScript. Alternatively, a new instance can be created with ``ClassDB.instance("Random")``, see :ref:`ClassDB.instance<class_ClassDB_method_instance>`.

You have to call :ref:`RandomNumberGenerator.randomize<class_RandomNumberGenerator_method_randomize>` for local instances manually if you want to have non-reproducible results, else done automatically for the global instance by default.

For 2D, use :ref:`Random2D<class_Random2D>` class, which inherits all the functionality behind ``Random`` as well.

Properties
----------

+---------------------------+---------------------------------------------------+-------------------------+
| :ref:`Color<class_Color>` | :ref:`color<class_Random_property_color>`         | ``Color( 0, 0, 1, 1 )`` |
+---------------------------+---------------------------------------------------+-------------------------+
| :ref:`bool<class_bool>`   | :ref:`condition<class_Random_property_condition>` | ``true``                |
+---------------------------+---------------------------------------------------+-------------------------+
| :ref:`int<class_int>`     | :ref:`number<class_Random_property_number>`       | ``37``                  |
+---------------------------+---------------------------------------------------+-------------------------+
| :ref:`float<class_float>` | :ref:`value<class_Random_property_value>`         | ``0.5``                 |
+---------------------------+---------------------------------------------------+-------------------------+

Methods
-------

+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`         | :ref:`choices<class_Random_method_choices>` **(** :ref:`Variant<class_Variant>` sequence, :ref:`int<class_int>` count=1, :ref:`PoolIntArray<class_PoolIntArray>` weights=null, :ref:`bool<class_bool>` cumulative=false **)**                                                                                                                                                                            |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`         | :ref:`color_hsv<class_Random_method_color_hsv>` **(** :ref:`float<class_float>` hue_min=0.0, :ref:`float<class_float>` hue_max=1.0, :ref:`float<class_float>` saturation_min=0.0, :ref:`float<class_float>` saturation_max=1.0, :ref:`float<class_float>` value_min=0.0, :ref:`float<class_float>` value_max=1.0, :ref:`float<class_float>` alpha_min=1.0, :ref:`float<class_float>` alpha_max=1.0 **)** |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`         | :ref:`color_rgb<class_Random_method_color_rgb>` **(** :ref:`float<class_float>` red_min=0.0, :ref:`float<class_float>` red_max=1.0, :ref:`float<class_float>` green_min=0.0, :ref:`float<class_float>` green_max=1.0, :ref:`float<class_float>` blue_min=0.0, :ref:`float<class_float>` blue_max=1.0, :ref:`float<class_float>` alpha_min=1.0, :ref:`float<class_float>` alpha_max=1.0 **)**             |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`decision<class_Random_method_decision>` **(** :ref:`float<class_float>` probability **)**                                                                                                                                                                                                                                                                                                          |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Reference<class_Reference>` | :ref:`new_instance<class_Random_method_new_instance>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                                |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`pick<class_Random_method_pick>` **(** :ref:`Variant<class_Variant>` sequence **)**                                                                                                                                                                                                                                                                                                                 |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`pop<class_Random_method_pop>` **(** :ref:`Variant<class_Variant>` sequence **)**                                                                                                                                                                                                                                                                                                                   |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`     | :ref:`range<class_Random_method_range>` **(** :ref:`Variant<class_Variant>` from, :ref:`Variant<class_Variant>` to **)**                                                                                                                                                                                                                                                                                 |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`shuffle<class_Random_method_shuffle>` **(** :ref:`Array<class_Array>` array **)**                                                                                                                                                                                                                                                                                                                  |
+-----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_Random_property_color:

- :ref:`Color<class_Color>` **color**

+-----------+-------------------------+
| *Default* | ``Color( 0, 0, 1, 1 )`` |
+-----------+-------------------------+
| *Getter*  | get_color()             |
+-----------+-------------------------+

The next random color in HSV color space. Saturated, bright colors are preferred. Equivalent to the following code:

::

    var color = Color.from_hsv(randf(), rand_range(0.5, 1.0), rand_range(0.5, 1.0))

For more options, use :ref:`color_hsv<class_Random_method_color_hsv>` or :ref:`color_rgb<class_Random_method_color_rgb>`.

----

.. _class_Random_property_condition:

- :ref:`bool<class_bool>` **condition**

+-----------+-----------------+
| *Default* | ``true``        |
+-----------+-----------------+
| *Getter*  | get_condition() |
+-----------+-----------------+

Generates a random boolean value. Useful for randomizing ``true`` and ``false`` states, conditions, decisions etc. The outcome is equal for both values.

::

    if Random.condition:
        pass

Equivalent to the following code:

::

    if randf() >= 0.5:
        pass

----

.. _class_Random_property_number:

- :ref:`int<class_int>` **number**

+-----------+--------------+
| *Default* | ``37``       |
+-----------+--------------+
| *Getter*  | get_number() |
+-----------+--------------+

Generates a random unsigned 32-bit integer. Equivalent to :ref:`RandomNumberGenerator.randi<class_RandomNumberGenerator_method_randi>`.

----

.. _class_Random_property_value:

- :ref:`float<class_float>` **value**

+-----------+-------------+
| *Default* | ``0.5``     |
+-----------+-------------+
| *Getter*  | get_value() |
+-----------+-------------+

Generates a random real number in the range of ``0.0..1.0``. Equivalent to :ref:`RandomNumberGenerator.randf<class_RandomNumberGenerator_method_randf>`.

Method Descriptions
-------------------

.. _class_Random_method_choices:

- :ref:`Array<class_Array>` **choices** **(** :ref:`Variant<class_Variant>` sequence, :ref:`int<class_int>` count=1, :ref:`PoolIntArray<class_PoolIntArray>` weights=null, :ref:`bool<class_bool>` cumulative=false **)**

Returns an :ref:`Array<class_Array>` of randomly picked elements from a ``sequence``, with the number of elements equal to ``count``. The elements are picked according to integer ``weights`` or an array of values from the ``sequence`` if it's a :ref:`Dictionary<class_Dictionary>` and if ``weights`` is empty.

All elements of ``weights`` must be non-negative integers, and must contain at least one non-zero element if ``weights`` is not empty. Additionally, the order of integers should be non-decreasing if ``cumulative`` is ``true``.

If ``weights`` is not empty and if ``sequence`` is not a :ref:`Dictionary<class_Dictionary>`, then the size of ``weights`` must be equal to the size of ``sequence``.

----

.. _class_Random_method_color_hsv:

- :ref:`Color<class_Color>` **color_hsv** **(** :ref:`float<class_float>` hue_min=0.0, :ref:`float<class_float>` hue_max=1.0, :ref:`float<class_float>` saturation_min=0.0, :ref:`float<class_float>` saturation_max=1.0, :ref:`float<class_float>` value_min=0.0, :ref:`float<class_float>` value_max=1.0, :ref:`float<class_float>` alpha_min=1.0, :ref:`float<class_float>` alpha_max=1.0 **)**

Generates a random :ref:`Color<class_Color>` specified in HSV color model. See also :ref:`Color.from_hsv<class_Color_method_from_hsv>`. By default, equivalent to the following code:

::

    var color = Color.from_hsv(randf(), randf(), randf())

If you want to generate colors which are not too pale and not too dark, use :ref:`color<class_Random_property_color>`.

----

.. _class_Random_method_color_rgb:

- :ref:`Color<class_Color>` **color_rgb** **(** :ref:`float<class_float>` red_min=0.0, :ref:`float<class_float>` red_max=1.0, :ref:`float<class_float>` green_min=0.0, :ref:`float<class_float>` green_max=1.0, :ref:`float<class_float>` blue_min=0.0, :ref:`float<class_float>` blue_max=1.0, :ref:`float<class_float>` alpha_min=1.0, :ref:`float<class_float>` alpha_max=1.0 **)**

Generates a random :ref:`Color<class_Color>` specified in RGB color model. By default, equivalent to the following code:

::

    var color = Color(randf(), randf(), randf())

If you want to generate colors which are not too pale and not too dark, use :ref:`color<class_Random_property_color>`.

----

.. _class_Random_method_decision:

- :ref:`bool<class_bool>` **decision** **(** :ref:`float<class_float>` probability **)**

Returns a boolean based on a given ``probability`` value in the range of ``0.0..1.0``. The higher the probability value the higher the chance of this returning ``true``.

----

.. _class_Random_method_new_instance:

- :ref:`Reference<class_Reference>` **new_instance** **(** **)** |const|

Instantiates a new local ``Random`` instance based on :ref:`RandomNumberGenerator<class_RandomNumberGenerator>`. Does not override the ``Random`` instance accessible at :ref:`@GlobalScope<class_@GlobalScope>`.

----

.. _class_Random_method_pick:

- :ref:`Variant<class_Variant>` **pick** **(** :ref:`Variant<class_Variant>` sequence **)**

Returns a random element from a container or indexable ``sequence``, such as :ref:`Array<class_Array>`, :ref:`Dictionary<class_Dictionary>`, :ref:`String<class_String>`. If container is empty, prints an error and returns ``null``.

----

.. _class_Random_method_pop:

- :ref:`Variant<class_Variant>` **pop** **(** :ref:`Variant<class_Variant>` sequence **)**

Returns a random element from an :ref:`Array<class_Array>` or :ref:`Dictionary<class_Dictionary>`, and then removes the value from it. If container is empty, prints an error and returns ``null``.

For performance reasons, this will modify the original order in the :ref:`Array<class_Array>`: the last value is swapped with the popped element, and then :ref:`Array.pop_back<class_Array_method_pop_back>` is called. See :ref:`Array.remove<class_Array_method_remove>` for explanations.

Unlike :ref:`pick<class_Random_method_pick>`, the :ref:`String<class_String>` and **Pool\*Array** types are not supported, since they are passed by value when calling this function.

----

.. _class_Random_method_range:

- :ref:`Variant<class_Variant>` **range** **(** :ref:`Variant<class_Variant>` from, :ref:`Variant<class_Variant>` to **)**

Generates a singular value in a specified range depending on the type of :ref:`Variant<class_Variant>`. The types of ``from`` and ``to`` must be the same.

For integer and float values, generates a random number in the range equivalently to :ref:`RandomNumberGenerator.randi_range<class_RandomNumberGenerator_method_randi_range>` and :ref:`RandomNumberGenerator.randf_range<class_RandomNumberGenerator_method_randf_range>` respectively.

For any other type, the value is linearly interpolated with a random weight of ``0.0..1.0``.

----

.. _class_Random_method_shuffle:

- void **shuffle** **(** :ref:`Array<class_Array>` array **)**

Shuffles the array such that the items will have a random order. By default, this method uses the global random number generator in ``Random`` singletons, but unlike in :ref:`Array.shuffle<class_Array_method_shuffle>`, local instances of ``Random`` can be created with :ref:`new_instance<class_Random_method_new_instance>` to achieve reproducible results given the same seed.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
