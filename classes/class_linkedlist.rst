:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the LinkedList.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_LinkedList:

LinkedList
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

A doubly linked list data structure.

Description
-----------

A data structure which consists of a set of sequentially linked elements called nodes. Uses :ref:`ListNode<class_ListNode>` as a basic building block. Each node contains a reference to the previous node, the next node, and the data associated with the node. Insertion and deletion operations are faster ``O(1)`` compared to :ref:`Array<class_Array>`, but performs worse for random access ``O(n)``.

:ref:`ListNode<class_ListNode>`\ s are constructed by inserting values to the list, and are not meant to be instantiated directly:

::

    var list = LinkedList.new()
    var node = list.push_back("Goost")
    var same_node = list.find("Goost")

Traversing a list can be done using a ``for`` loop:

::

    for node in list:
        print(node)

or by manually walking the list using the nodes themselves:

::

    # Forward!
    var node = list.front
    while node:
        print(node)
        node = node.next
    
    # Backward!
    var node = list.back
    while node:
        print(node)
        node = node.prev

Nodes can be passed around throughout the code, and values can be changed dynamically for nodes which are already inserted into the list.

Properties
----------

+---------------------------------+-----------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`back<class_LinkedList_property_back>`   |
+---------------------------------+-----------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`front<class_LinkedList_property_front>` |
+---------------------------------+-----------------------------------------------+

Methods
-------

+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`clear<class_LinkedList_method_clear>` **(** **)**                                                                                               |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_from<class_LinkedList_method_create_from>` **(** :ref:`Variant<class_Variant>` value **)**                                               |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`empty<class_LinkedList_method_empty>` **(** **)** |const|                                                                                       |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`erase<class_LinkedList_method_erase>` **(** :ref:`Variant<class_Variant>` value **)**                                                           |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`find<class_LinkedList_method_find>` **(** :ref:`Variant<class_Variant>` value **)**                                                             |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`       | :ref:`get_elements<class_LinkedList_method_get_elements>` **(** **)**                                                                                 |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`       | :ref:`get_nodes<class_LinkedList_method_get_nodes>` **(** **)**                                                                                       |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`insert_after<class_LinkedList_method_insert_after>` **(** :ref:`ListNode<class_ListNode>` node, :ref:`Variant<class_Variant>` value **)**       |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`insert_before<class_LinkedList_method_insert_before>` **(** :ref:`ListNode<class_ListNode>` node, :ref:`Variant<class_Variant>` value **)**     |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`invert<class_LinkedList_method_invert>` **(** **)**                                                                                             |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`move_before<class_LinkedList_method_move_before>` **(** :ref:`ListNode<class_ListNode>` node, :ref:`ListNode<class_ListNode>` before_node **)** |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`move_to_back<class_LinkedList_method_move_to_back>` **(** :ref:`ListNode<class_ListNode>` node **)**                                            |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`move_to_front<class_LinkedList_method_move_to_front>` **(** :ref:`ListNode<class_ListNode>` node **)**                                          |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`pop_back<class_LinkedList_method_pop_back>` **(** **)**                                                                                         |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`pop_front<class_LinkedList_method_pop_front>` **(** **)**                                                                                       |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`push_back<class_LinkedList_method_push_back>` **(** :ref:`Variant<class_Variant>` value **)**                                                   |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ListNode<class_ListNode>` | :ref:`push_front<class_LinkedList_method_push_front>` **(** :ref:`Variant<class_Variant>` value **)**                                                 |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`size<class_LinkedList_method_size>` **(** **)** |const|                                                                                         |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`sort<class_LinkedList_method_sort>` **(** **)**                                                                                                 |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`swap<class_LinkedList_method_swap>` **(** :ref:`ListNode<class_ListNode>` node_A, :ref:`ListNode<class_ListNode>` node_B **)**                  |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_LinkedList_property_back:

- :ref:`ListNode<class_ListNode>` **back**

+----------+------------+
| *Getter* | get_back() |
+----------+------------+

The last node in the list. Can be ``null`` if the list is :ref:`empty<class_LinkedList_method_empty>`.

----

.. _class_LinkedList_property_front:

- :ref:`ListNode<class_ListNode>` **front**

+----------+-------------+
| *Getter* | get_front() |
+----------+-------------+

The first node in the list. Can be ``null`` if the list is :ref:`empty<class_LinkedList_method_empty>`.

Method Descriptions
-------------------

.. _class_LinkedList_method_clear:

- void **clear** **(** **)**

Erases all nodes from the list.

----

.. _class_LinkedList_method_create_from:

- void **create_from** **(** :ref:`Variant<class_Variant>` value **)**

Initializes the list from a :ref:`Variant<class_Variant>` compatible type. Clears all nodes before copying.

If ``value`` is ``null``, just clears the contents of the list.

If ``value`` is :ref:`Array<class_Array>`, each element in the array is converted to a :ref:`ListNode<class_ListNode>`. Pool\*Arrays are converted similarly to :ref:`Array<class_Array>`.

If ``value`` is :ref:`Dictionary<class_Dictionary>`, each key in the dictionary is converted to a :ref:`ListNode<class_ListNode>`, and the values are encoded as :ref:`ListNode<class_ListNode>` meta variables using :ref:`Object.set_meta<class_Object_method_set_meta>`. Values can be retrieved later with ``node.get_meta("value")`` for each node.

Any other type is simply pushed back to the list.

----

.. _class_LinkedList_method_empty:

- :ref:`bool<class_bool>` **empty** **(** **)** |const|

Returns ``true`` if the list doesn't contain any nodes.

----

.. _class_LinkedList_method_erase:

- :ref:`bool<class_bool>` **erase** **(** :ref:`Variant<class_Variant>` value **)**

Erases (deletes) the first found node with a matching value in the list.

----

.. _class_LinkedList_method_find:

- :ref:`ListNode<class_ListNode>` **find** **(** :ref:`Variant<class_Variant>` value **)**

Returns a node if a list contains a node with specified value, otherwise returns ``null``.

----

.. _class_LinkedList_method_get_elements:

- :ref:`Array<class_Array>` **get_elements** **(** **)**

An alias for :ref:`get_nodes<class_LinkedList_method_get_nodes>`.

----

.. _class_LinkedList_method_get_nodes:

- :ref:`Array<class_Array>` **get_nodes** **(** **)**

Returns all nodes as an :ref:`Array<class_Array>`, preserving front-to-back order.

----

.. _class_LinkedList_method_insert_after:

- :ref:`ListNode<class_ListNode>` **insert_after** **(** :ref:`ListNode<class_ListNode>` node, :ref:`Variant<class_Variant>` value **)**

Constructs a new :ref:`ListNode<class_ListNode>` and places it *after* existing node in the list. If ``node`` is ``null``, then the value is pushed at the end of the list, making the behavior equivalent to :ref:`push_back<class_LinkedList_method_push_back>`.

----

.. _class_LinkedList_method_insert_before:

- :ref:`ListNode<class_ListNode>` **insert_before** **(** :ref:`ListNode<class_ListNode>` node, :ref:`Variant<class_Variant>` value **)**

Constructs a new :ref:`ListNode<class_ListNode>` and places it *before* existing node in the list. If ``node`` is ``null``, then the value is pushed at the end of the list, making the behavior equivalent to :ref:`push_back<class_LinkedList_method_push_back>`.

----

.. _class_LinkedList_method_invert:

- void **invert** **(** **)**

Inverts the order of nodes in the list.

----

.. _class_LinkedList_method_move_before:

- void **move_before** **(** :ref:`ListNode<class_ListNode>` node, :ref:`ListNode<class_ListNode>` before_node **)**

Moves a node *before* the other one within the list.

----

.. _class_LinkedList_method_move_to_back:

- void **move_to_back** **(** :ref:`ListNode<class_ListNode>` node **)**

Moves a node to the back of the list (:ref:`back<class_LinkedList_property_back>` node will point to ``node``).

----

.. _class_LinkedList_method_move_to_front:

- void **move_to_front** **(** :ref:`ListNode<class_ListNode>` node **)**

Moves a node to the front of the list (the :ref:`front<class_LinkedList_property_front>` node will point to ``node``).

----

.. _class_LinkedList_method_pop_back:

- void **pop_back** **(** **)**

Erases the last node of the list. Make sure to preserve the :ref:`ListNode.value<class_ListNode_property_value>` if you're interested in the data associated with the node:

::

    var value = list.back.value
    list.pop_back()

----

.. _class_LinkedList_method_pop_front:

- void **pop_front** **(** **)**

Erases the first node of the list. Make sure to preserve the :ref:`ListNode.value<class_ListNode_property_value>` if you're interested in the data associated with the node:

::

    var value = list.front.value
    list.pop_front()

----

.. _class_LinkedList_method_push_back:

- :ref:`ListNode<class_ListNode>` **push_back** **(** :ref:`Variant<class_Variant>` value **)**

Constructs a new :ref:`ListNode<class_ListNode>` and pushes it at the *end* of the list.

----

.. _class_LinkedList_method_push_front:

- :ref:`ListNode<class_ListNode>` **push_front** **(** :ref:`Variant<class_Variant>` value **)**

Constructs a new :ref:`ListNode<class_ListNode>` and pushes it at the *beginning* of the list.

----

.. _class_LinkedList_method_size:

- :ref:`int<class_int>` **size** **(** **)** |const|

Returns the total number of nodes in the list.

----

.. _class_LinkedList_method_sort:

- void **sort** **(** **)**

Sorts the list in alphabetical order if the list contains :ref:`String<class_String>`\ s. If the list contains nodes with different types of values, these are sorted according to the order of type in :ref:`Variant<class_Variant>`.

----

.. _class_LinkedList_method_swap:

- void **swap** **(** :ref:`ListNode<class_ListNode>` node_A, :ref:`ListNode<class_ListNode>` node_B **)**

Moves ``node_A`` to the position of ``node_B``, and moves ``node_B`` to the original position of ``node_A``. If ``node_A == node_B``, does nothing.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
