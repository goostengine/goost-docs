:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Debug2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Debug2D:

Debug2D
=======

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Debug drawing in 2D.

Description
-----------

A singleton which allows to draw various primitives in order to aid visual debugging in 2D. Unlike other nodes, this allows to draw outside of :ref:`CanvasItem._draw<class_CanvasItem_method__draw>` or :ref:`CanvasItem.NOTIFICATION_DRAW<class_CanvasItem_constant_NOTIFICATION_DRAW>`, so ``Debug2D`` can be used from everywhere in code, for example:

::

    func _ready():
        Debug2D.draw_line(Vector2(0, 0), Vector2(100, 100))

When drawing each frame, you should call :ref:`clear<class_Debug2D_method_clear>` prior to drawing, otherwise draw commands will accumulate infinitely, decreasing performance:

::

    func _process(delta):
        Debug2D.clear()
        Debug2D.draw_line(Vector2(0, 0), Vector2(100, 100))

It's also possible to keep a history of draw commands by calling :ref:`capture<class_Debug2D_method_capture>`:

::

    func _ready():
        var points = [Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)]
        for point in points:
            Debug2D.draw_circle(8, point)
            Debug2D.capture()

You can then access the captured snapshots using :ref:`get_capture<class_Debug2D_method_get_capture>`, which will return a special :ref:`DebugCapture<class_DebugCapture>` object, refer to :ref:`DebugCapture<class_DebugCapture>` documentation for more information on how to playback snapshots.

Default draw parameters such as color or line width can be configured via :ref:`ProjectSettings<class_ProjectSettings>` (see ``debug/draw`` section), or using one of the ``draw_set_*`` methods. Arguments passed directly to methods will override parameters set by ``draw_set_*`` methods, and ``draw_set_*`` methods will override parameters defined in :ref:`ProjectSettings<class_ProjectSettings>`.

\ **List of common parameters:**\ 

\ ``color:`` Specifies draw color.

\ ``filled:`` If ``true``, then all geometrical primitives such as polygon, circle, rectangle etc. will be drawn with a solid color, otherwise only the outline is drawn.

\ ``line_width:`` Specifies line with for methods such as :ref:`draw_line<class_Debug2D_method_draw_line>`, or line width of unfilled primitives.

\ **Note:** the drawing works in debug builds only.

Properties
----------

+-----------------------------+--------------------------------------------------------+
| :ref:`Object<class_Object>` | :ref:`canvas_item<class_Debug2D_property_canvas_item>` |
+-----------------------------+--------------------------------------------------------+
| :ref:`bool<class_bool>`     | :ref:`enabled<class_Debug2D_property_enabled>`         |
+-----------------------------+--------------------------------------------------------+

Methods
-------

+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`capture<class_Debug2D_method_capture>` **(** **)**                                                                                                                                                                                                                                                                            |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`clear<class_Debug2D_method_clear>` **(** **)**                                                                                                                                                                                                                                                                                |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw<class_Debug2D_method_draw>` **(** :ref:`String<class_String>` method, :ref:`Array<class_Array>` args=null **)**                                                                                                                                                                                                          |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_arrow<class_Debug2D_method_draw_arrow>` **(** :ref:`Vector2<class_Vector2>` from, :ref:`Vector2<class_Vector2>` to, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`float<class_float>` width=1.0, :ref:`Vector2<class_Vector2>` tip_size=Vector2( 8, 8 ), :ref:`float<class_float>` tip_offset=0.0 **)** |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_circle<class_Debug2D_method_draw_circle>` **(** :ref:`float<class_float>` radius, :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ), :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**                                        |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_line<class_Debug2D_method_draw_line>` **(** :ref:`Vector2<class_Vector2>` from, :ref:`Vector2<class_Vector2>` to, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`float<class_float>` width=1.0 **)**                                                                                                     |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_polygon<class_Debug2D_method_draw_polygon>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**                                                                       |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_polyline<class_Debug2D_method_draw_polyline>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`float<class_float>` width=1.0 **)**                                                                                                         |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_rectangle<class_Debug2D_method_draw_rectangle>` **(** :ref:`Vector2<class_Vector2>` extents, :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ), :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**                             |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_region<class_Debug2D_method_draw_region>` **(** :ref:`Rect2<class_Rect2>` region, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**                                                                                                |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_reset<class_Debug2D_method_draw_reset>` **(** :ref:`String<class_String>` option="" **)**                                                                                                                                                                                                                                |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_set_color<class_Debug2D_method_draw_set_color>` **(** :ref:`Color<class_Color>` color **)**                                                                                                                                                                                                                              |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_set_filled<class_Debug2D_method_draw_set_filled>` **(** :ref:`bool<class_bool>` filled **)**                                                                                                                                                                                                                             |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_set_line_width<class_Debug2D_method_draw_set_line_width>` **(** :ref:`float<class_float>` width **)**                                                                                                                                                                                                                    |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_set_transform<class_Debug2D_method_draw_set_transform>` **(** :ref:`Vector2<class_Vector2>` position, :ref:`float<class_float>` rotation=0, :ref:`Vector2<class_Vector2>` scale=Vector2( 1, 1 ) **)**                                                                                                                    |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_set_transform_matrix<class_Debug2D_method_draw_set_transform_matrix>` **(** :ref:`Transform2D<class_Transform2D>` matrix **)**                                                                                                                                                                                           |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`draw_text<class_Debug2D_method_draw_text>` **(** :ref:`String<class_String>` text, :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ), :ref:`Color<class_Color>` color=Color( 1, 1, 1, 1 ) **)**                                                                                                                          |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`             | :ref:`get_base<class_Debug2D_method_get_base>` **(** **)** |const|                                                                                                                                                                                                                                                                  |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`DebugCapture<class_DebugCapture>` | :ref:`get_capture<class_Debug2D_method_get_capture>` **(** **)** |const|                                                                                                                                                                                                                                                            |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GridRect<class_GridRect>`         | :ref:`get_grid<class_Debug2D_method_get_grid>` **(** **)** |const|                                                                                                                                                                                                                                                                  |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                    | :ref:`update<class_Debug2D_method_update>` **(** **)**                                                                                                                                                                                                                                                                              |
+-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_Debug2D_property_canvas_item:

- :ref:`Object<class_Object>` **canvas_item**

+----------+------------------------+
| *Setter* | set_canvas_item(value) |
+----------+------------------------+
| *Getter* | get_canvas_item()      |
+----------+------------------------+

The current active canvas item used for drawing. To restore the default, assign the base canvas:

::

    Debug2D.canvas_item = Debug2D.get_base()

----

.. _class_Debug2D_property_enabled:

- :ref:`bool<class_bool>` **enabled**

+----------+--------------------+
| *Setter* | set_enabled(value) |
+----------+--------------------+
| *Getter* | is_enabled()       |
+----------+--------------------+

If ``false``, then all debug drawing is disabled.

Method Descriptions
-------------------

.. _class_Debug2D_method_capture:

- void **capture** **(** **)**

Captures a new snapshot of all draw commands that were called to this moment. Can be called multiple times.

----

.. _class_Debug2D_method_clear:

- void **clear** **(** **)**

Clears the canvas, all the draw calls from the queue of draw commands are removed.

----

.. _class_Debug2D_method_draw:

- void **draw** **(** :ref:`String<class_String>` method, :ref:`Array<class_Array>` args=null **)**

Calls a custom draw method. It's possible to call both built-in :ref:`CanvasItem<class_CanvasItem>` methods (starting with ``draw_*``), or methods defined via script.

----

.. _class_Debug2D_method_draw_arrow:

- void **draw_arrow** **(** :ref:`Vector2<class_Vector2>` from, :ref:`Vector2<class_Vector2>` to, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`float<class_float>` width=1.0, :ref:`Vector2<class_Vector2>` tip_size=Vector2( 8, 8 ), :ref:`float<class_float>` tip_offset=0.0 **)**

Draws an arrow. The ``tip_size`` configures the size of the arrow's tip, where X coordinate corresponds to the width, and Y corresponds to the height. The ``tip_offset`` allows to shift the tip towards the beginning along arrow's length, and is specified as a fraction of the arrow's length in the range of ``[0..1]``.

The following snippet shows how to draw a cyclic directed graph with vertices drawn as circles, where the arrow tip is perfectly aligned to circle's boundary:

::

    for i in points.size():
        var from = points[i]
        var to = points[(i + 1) % points.size()]
    
        var radius = 8.0
        var length = (to - from).length()
        var offset = radius / length
    
        Debug2D.draw_arrow(from, to, Color.white, 1, Vector2(8, 8), offset)
        Debug2D.draw_circle(radius, from, Color.white)

----

.. _class_Debug2D_method_draw_circle:

- void **draw_circle** **(** :ref:`float<class_float>` radius, :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ), :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**

Draws a circle. Unlike in :ref:`CanvasItem.draw_circle<class_CanvasItem_method_draw_circle>`, the total number of vertices is configured according to predefined arc tolerance to improve accuracy when drawing circles with large radius.

----

.. _class_Debug2D_method_draw_line:

- void **draw_line** **(** :ref:`Vector2<class_Vector2>` from, :ref:`Vector2<class_Vector2>` to, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`float<class_float>` width=1.0 **)**

Draws a line.

----

.. _class_Debug2D_method_draw_polygon:

- void **draw_polygon** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polygon, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**

Draws a polygon.

----

.. _class_Debug2D_method_draw_polyline:

- void **draw_polyline** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` polyline, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`float<class_float>` width=1.0 **)**

Draws a polyline.

----

.. _class_Debug2D_method_draw_rectangle:

- void **draw_rectangle** **(** :ref:`Vector2<class_Vector2>` extents, :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ), :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**

Draws a rectangle. The total width and height is twice the half ``extents``. See also :ref:`draw_region<class_Debug2D_method_draw_region>`.

----

.. _class_Debug2D_method_draw_region:

- void **draw_region** **(** :ref:`Rect2<class_Rect2>` region, :ref:`Color<class_Color>` color=Color( 0, 0.6, 0.7, 1 ), :ref:`bool<class_bool>` filled=true, :ref:`float<class_float>` width=1.0 **)**

Draws a region :ref:`Rect2<class_Rect2>`. For example, you can draw a bounding rectangle of points:

::

    Debug2D.draw_region(GoostGeometry2D.bounding_rect(points))

See also :ref:`draw_rectangle<class_Debug2D_method_draw_rectangle>`.

----

.. _class_Debug2D_method_draw_reset:

- void **draw_reset** **(** :ref:`String<class_String>` option="" **)**

Resets all drawing options set with :ref:`draw_set_color<class_Debug2D_method_draw_set_color>`, :ref:`draw_set_filled<class_Debug2D_method_draw_set_filled>`, and :ref:`draw_set_line_width<class_Debug2D_method_draw_set_line_width>`.

----

.. _class_Debug2D_method_draw_set_color:

- void **draw_set_color** **(** :ref:`Color<class_Color>` color **)**

Overrides the ``color`` parameter for all future draw calls.

----

.. _class_Debug2D_method_draw_set_filled:

- void **draw_set_filled** **(** :ref:`bool<class_bool>` filled **)**

Overrides the ``filled`` parameter for all future draw calls.

----

.. _class_Debug2D_method_draw_set_line_width:

- void **draw_set_line_width** **(** :ref:`float<class_float>` width **)**

Overrides the ``width`` parameter for all future draw calls.

----

.. _class_Debug2D_method_draw_set_transform:

- void **draw_set_transform** **(** :ref:`Vector2<class_Vector2>` position, :ref:`float<class_float>` rotation=0, :ref:`Vector2<class_Vector2>` scale=Vector2( 1, 1 ) **)**

Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this. Equivalent to :ref:`CanvasItem.draw_set_transform<class_CanvasItem_method_draw_set_transform>`.

----

.. _class_Debug2D_method_draw_set_transform_matrix:

- void **draw_set_transform_matrix** **(** :ref:`Transform2D<class_Transform2D>` matrix **)**

Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this. Equivalent to :ref:`CanvasItem.draw_set_transform_matrix<class_CanvasItem_method_draw_set_transform_matrix>`.

----

.. _class_Debug2D_method_draw_text:

- void **draw_text** **(** :ref:`String<class_String>` text, :ref:`Vector2<class_Vector2>` position=Vector2( 0, 0 ), :ref:`Color<class_Color>` color=Color( 1, 1, 1, 1 ) **)**

Draws text at specified position using the default :ref:`Font<class_Font>`. Unlike other draw methods, the default color will not be affected by :ref:`draw_set_color<class_Debug2D_method_draw_set_color>`.

----

.. _class_Debug2D_method_get_base:

- :ref:`Object<class_Object>` **get_base** **(** **)** |const|

Returns the default base :ref:`CanvasItem<class_CanvasItem>` used for drawing.

----

.. _class_Debug2D_method_get_capture:

- :ref:`DebugCapture<class_DebugCapture>` **get_capture** **(** **)** |const|

Returns :ref:`DebugCapture<class_DebugCapture>` object to manage history of draw commands.

----

.. _class_Debug2D_method_get_grid:

- :ref:`GridRect<class_GridRect>` **get_grid** **(** **)** |const|

Returns the default :ref:`GridRect<class_GridRect>` used to draw an infinite grid at run-time.

The grid drawing is disabled by default, so if you want to use it, you have to go into project settings and enable it manually. You can change the grid properties both by configuring project settings at ``debug/draw/2d/grid`` and via code:

::

    func _ready():
        var grid: GridRect = Debug2D.get_grid()
        grid.show()

If you use :ref:`Camera2D<class_Camera2D>` or change :ref:`Viewport.canvas_transform<class_Viewport_property_canvas_transform>`, the grid's position and scale are going to be updated automatically to simulate an infinite grid. Note that :ref:`GridRect<class_GridRect>` doesn't currently support rotated grid lines.

----

.. _class_Debug2D_method_update:

- void **update** **(** **)**

Update all draw calls to request redraw. Similar to :ref:`CanvasItem.update<class_CanvasItem_method_update>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
