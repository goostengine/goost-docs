:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GraphEdge.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GraphEdge:

GraphEdge
=========

**Inherits:** :ref:`Object<class_Object>`

A data structure used to represent an edge in a :ref:`Graph<class_Graph>`.

Description
-----------

An edge connects two :ref:`GraphVertex<class_GraphVertex>` vertices together. The edge's direction is determined by whether it was added via :ref:`Graph.add_edge<class_Graph_method_add_edge>` or :ref:`Graph.add_directed_edge<class_Graph_method_add_directed_edge>`. If the edge is directed, then :ref:`a<class_GraphEdge_property_a>` and :ref:`b<class_GraphEdge_property_b>` must be interpreted as endpoints of an arrow pointing *from* a vertex *to* another.

You can call :ref:`Object.free<class_Object_method_free>` to remove this edge from the :ref:`Graph<class_Graph>` it belongs to.

Properties
----------

+---------------------------------------+----------------------------------------------+
| :ref:`GraphVertex<class_GraphVertex>` | :ref:`a<class_GraphEdge_property_a>`         |
+---------------------------------------+----------------------------------------------+
| :ref:`GraphVertex<class_GraphVertex>` | :ref:`b<class_GraphEdge_property_b>`         |
+---------------------------------------+----------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`value<class_GraphEdge_property_value>` |
+---------------------------------------+----------------------------------------------+

Methods
-------

+---------------------------+----------------------------------------------------------------------------+
| :ref:`Graph<class_Graph>` | :ref:`get_graph<class_GraphEdge_method_get_graph>` **(** **)** |const|     |
+---------------------------+----------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`is_directed<class_GraphEdge_method_is_directed>` **(** **)** |const| |
+---------------------------+----------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`is_loop<class_GraphEdge_method_is_loop>` **(** **)** |const|         |
+---------------------------+----------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_GraphEdge_property_a:

- :ref:`GraphVertex<class_GraphVertex>` **a**

+----------+---------+
| *Getter* | get_a() |
+----------+---------+

The first endpoint, or the starting vertex of the edge.

----

.. _class_GraphEdge_property_b:

- :ref:`GraphVertex<class_GraphVertex>` **b**

+----------+---------+
| *Getter* | get_b() |
+----------+---------+

The second endpoint, or the final vertex of the edge.

----

.. _class_GraphEdge_property_value:

- :ref:`Variant<class_Variant>` **value**

+----------+------------------+
| *Setter* | set_value(value) |
+----------+------------------+
| *Getter* | get_value()      |
+----------+------------------+

Edge's data (could be a weight, a label, a list of attributes etc).

Method Descriptions
-------------------

.. _class_GraphEdge_method_get_graph:

- :ref:`Graph<class_Graph>` **get_graph** **(** **)** |const|

Returns the master :ref:`Graph<class_Graph>` that instantiated and manages this edge.

----

.. _class_GraphEdge_method_is_directed:

- :ref:`bool<class_bool>` **is_directed** **(** **)** |const|

Returns ``true`` if the edge has a notion of direction, otherwise returns ``false`` (associative edge).

----

.. _class_GraphEdge_method_is_loop:

- :ref:`bool<class_bool>` **is_loop** **(** **)** |const|

Returns ``true`` if the edge is a self-loop, meaning that :ref:`a<class_GraphEdge_property_a>` is equal to :ref:`b<class_GraphEdge_property_b>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
