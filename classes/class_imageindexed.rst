:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the ImageIndexed.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_ImageIndexed:

ImageIndexed
============

**Inherits:** :ref:`Image<class_Image>` **<** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Adds pseudo support for indexed images.

Description
-----------

The class adds support for indexed images with a color palette and provides common operations to create, generate and operate on color palette and index data. This does not actually add a ``FORMAT_INDEXED`` image format as modern GPUs don't actually support it, yet index data is stored internally alongside regular pixels if an image has a palette. This allows to interchange (swap, extend) index data to pixel data via :ref:`apply_palette<class_ImageIndexed_method_apply_palette>`, allowing for things like simple palette swapping without using shaders, finding average/dominant colors in an image as the class provides a way to generate color palette with specified number of colors which involves color quantization.

Tutorials
---------

- `https://goost.readthedocs.io/en/gd3/components/image_processing/image_indexed.html <https://goost.readthedocs.io/en/gd3/components/image_processing/image_indexed.html>`__

Properties
----------

+---------------------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`         | data                                                          | ``{"data": PoolByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}`` (overrides :ref:`Image<class_Image_property_data>`) |
+---------------------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`   | :ref:`index_data<class_ImageIndexed_property_index_data>`     |                                                                                                                                              |
+---------------------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolColorArray<class_PoolColorArray>` | :ref:`palette<class_ImageIndexed_property_palette>`           |                                                                                                                                              |
+---------------------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolByteArray<class_PoolByteArray>`   | :ref:`palette_data<class_ImageIndexed_property_palette_data>` |                                                                                                                                              |
+---------------------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+

Methods
-------

+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`apply_palette<class_ImageIndexed_method_apply_palette>` **(** **)**                                                                                                                                                                                              |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`clear_palette<class_ImageIndexed_method_clear_palette>` **(** **)**                                                                                                                                                                                              |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`create_indexed<class_ImageIndexed_method_create_indexed>` **(** :ref:`int<class_int>` num_palette_entries=256 **)**                                                                                                                                              |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`create_indexed_from_data<class_ImageIndexed_method_create_indexed_from_data>` **(** :ref:`PoolByteArray<class_PoolByteArray>` palette_data, :ref:`PoolByteArray<class_PoolByteArray>` index_data **)**                                                           |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`             | :ref:`generate_palette<class_ImageIndexed_method_generate_palette>` **(** :ref:`int<class_int>` num_colors=256, :ref:`DitherMode<enum_ImageIndexed_DitherMode>` dithering=0, :ref:`bool<class_bool>` with_alpha=true, :ref:`bool<class_bool>` high_quality=false **)** |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`             | :ref:`get_palette_color<class_ImageIndexed_method_get_palette_color>` **(** :ref:`int<class_int>` index **)** |const|                                                                                                                                                  |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_palette_size<class_ImageIndexed_method_get_palette_size>` **(** **)** |const|                                                                                                                                                                                |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                 | :ref:`get_pixel_indexed<class_ImageIndexed_method_get_pixel_indexed>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |const|                                                                                                                             |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`has_palette<class_ImageIndexed_method_has_palette>` **(** **)** |const|                                                                                                                                                                                          |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`load_indexed_png<class_ImageIndexed_method_load_indexed_png>` **(** :ref:`String<class_String>` path **)**                                                                                                                                                       |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`lock_indexed<class_ImageIndexed_method_lock_indexed>` **(** **)**                                                                                                                                                                                                |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`save_indexed_png<class_ImageIndexed_method_save_indexed_png>` **(** :ref:`String<class_String>` path **)** |const|                                                                                                                                               |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_palette_color<class_ImageIndexed_method_set_palette_color>` **(** :ref:`int<class_int>` index, :ref:`Color<class_Color>` color **)**                                                                                                                         |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`set_pixel_indexed<class_ImageIndexed_method_set_pixel_indexed>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y, :ref:`int<class_int>` index **)**                                                                                                        |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                  | :ref:`unlock_indexed<class_ImageIndexed_method_unlock_indexed>` **(** **)**                                                                                                                                                                                            |
+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_ImageIndexed_DitherMode:

.. _class_ImageIndexed_constant_DITHER_NONE:

.. _class_ImageIndexed_constant_DITHER_ORDERED:

.. _class_ImageIndexed_constant_DITHER_RANDOM:

enum **DitherMode**:

- **DITHER_NONE** = **0** --- Do not apply image dithering during palette generation.

- **DITHER_ORDERED** = **1** --- Applies ordered dithering during palette generation. The algorithm is characterized by noticeable crosshatch patterns to improve the image look with limited number of colors.

- **DITHER_RANDOM** = **2** --- Applies random dithering during palette generation. The algorithm is characterized by noticeable random noise patterns to improve the image look with limited number of colors.

Constants
---------

.. _class_ImageIndexed_constant_MAX_PALETTE_SIZE:

- **MAX_PALETTE_SIZE** = **256** --- The maximum number of palette entries supported.

Property Descriptions
---------------------

.. _class_ImageIndexed_property_index_data:

- :ref:`PoolByteArray<class_PoolByteArray>` **index_data**

+----------+------------------+
| *Getter* | get_index_data() |
+----------+------------------+

The internal data representing the indices pointing to palette entries of this image. Cannot be set directly, use :ref:`create_indexed_from_data<class_ImageIndexed_method_create_indexed_from_data>`.

----

.. _class_ImageIndexed_property_palette:

- :ref:`PoolColorArray<class_PoolColorArray>` **palette**

+----------+--------------------+
| *Setter* | set_palette(value) |
+----------+--------------------+
| *Getter* | get_palette()      |
+----------+--------------------+

Represents the color palette of this image. The palette can be replaced if the image already has a palette with the same size. In order to change the number of palette entries, use :ref:`create_indexed<class_ImageIndexed_method_create_indexed>`, :ref:`generate_palette<class_ImageIndexed_method_generate_palette>`, or :ref:`clear_palette<class_ImageIndexed_method_clear_palette>`. Note that changing the palette size invalidates existing index data and has to be cleared, which is done automatically.

----

.. _class_ImageIndexed_property_palette_data:

- :ref:`PoolByteArray<class_PoolByteArray>` **palette_data**

+----------+--------------------+
| *Getter* | get_palette_data() |
+----------+--------------------+

The internal data representing the palette of this image. Cannot be set directly, use :ref:`palette<class_ImageIndexed_property_palette>`.

Method Descriptions
-------------------

.. _class_ImageIndexed_method_apply_palette:

- :ref:`Error<enum_@GlobalScope_Error>` **apply_palette** **(** **)**

Extends color palette associated with this image from index data and overwrites the original image.

Note that the image will still be represented as true color.

----

.. _class_ImageIndexed_method_clear_palette:

- void **clear_palette** **(** **)**

Clears palette and associated index data from this image.

----

.. _class_ImageIndexed_method_create_indexed:

- :ref:`Error<enum_@GlobalScope_Error>` **create_indexed** **(** :ref:`int<class_int>` num_palette_entries=256 **)**

Internally allocates indexed image data with the same dimensions as in this image. The number of palette entries can be specified to allocate palette data to be used by image indices.

----

.. _class_ImageIndexed_method_create_indexed_from_data:

- :ref:`Error<enum_@GlobalScope_Error>` **create_indexed_from_data** **(** :ref:`PoolByteArray<class_PoolByteArray>` palette_data, :ref:`PoolByteArray<class_PoolByteArray>` index_data **)**

A low-level interface to allocate indexed image and color palette from raw data. Make sure that the data is valid and all indices point to valid color palette entries. The palette bitness is determined by image pixel size (in bytes).

----

.. _class_ImageIndexed_method_generate_palette:

- :ref:`float<class_float>` **generate_palette** **(** :ref:`int<class_int>` num_colors=256, :ref:`DitherMode<enum_ImageIndexed_DitherMode>` dithering=0, :ref:`bool<class_bool>` with_alpha=true, :ref:`bool<class_bool>` high_quality=false **)**

Generates an optimal color palette for this image and maps it to indices. The maximum palette color size that can be generated is 256. Dithering can be applied to improve the overall look of the image with low number of colors, see :ref:`DitherMode<enum_ImageIndexed_DitherMode>`.

If ``with_alpha`` is ``true``, the alpha channel will be included for quantization algorithm, set this to false if the image is already premultiplied by alpha or if you don't want the alpha values to affect palette generation.

If ``high_quality`` is ``true``, the quantization algorithm will go through additional iteration, potentially improving color mapping quality in expense of performance.

The image must be converted to :ref:`Image.FORMAT_RGBA8<class_Image_constant_FORMAT_RGBA8>` before generating palette.

Note that this method overwrites previously created or generated palette and index data.

----

.. _class_ImageIndexed_method_get_palette_color:

- :ref:`Color<class_Color>` **get_palette_color** **(** :ref:`int<class_int>` index **)** |const|

Returns color palette entry at ``index`` position.

----

.. _class_ImageIndexed_method_get_palette_size:

- :ref:`int<class_int>` **get_palette_size** **(** **)** |const|

Returns the total number of color palette entries.

----

.. _class_ImageIndexed_method_get_pixel_indexed:

- :ref:`int<class_int>` **get_pixel_indexed** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |const|

Returns an index which is mapped to color palette. See notes for :ref:`Image.get_pixel<class_Image_method_get_pixel>`.

----

.. _class_ImageIndexed_method_has_palette:

- :ref:`bool<class_bool>` **has_palette** **(** **)** |const|

Return ``true`` is this image has color palette.

----

.. _class_ImageIndexed_method_load_indexed_png:

- :ref:`Error<enum_@GlobalScope_Error>` **load_indexed_png** **(** :ref:`String<class_String>` path **)**

Loads indexed PNG image from disk at specified path. If PNG image is not indexed, it will load the image normally without color palette, see :ref:`Image.load<class_Image_method_load>`. If loaded image is indexed, the color palette and index data will be accessible from within this image. If this image is duplicated, the color palette and index data will not be copied, use :ref:`index_data<class_ImageIndexed_property_index_data>`, :ref:`palette_data<class_ImageIndexed_property_palette_data>` and :ref:`create_indexed_from_data<class_ImageIndexed_method_create_indexed_from_data>` to manually duplicate palette and index data.

----

.. _class_ImageIndexed_method_lock_indexed:

- void **lock_indexed** **(** **)**

Locks the index data for writing access.

----

.. _class_ImageIndexed_method_save_indexed_png:

- :ref:`Error<enum_@GlobalScope_Error>` **save_indexed_png** **(** :ref:`String<class_String>` path **)** |const|

Saves indexed PNG image to disk at specified path. If image has palette and index data associated with it, the image will be saved as indexed, else saved as true color, see :ref:`Image.save_png<class_Image_method_save_png>`. The image with transparency is saved in a separate PNG alpha chunk, preserving transparency in indexed image with regular RGB color palette.

----

.. _class_ImageIndexed_method_set_palette_color:

- void **set_palette_color** **(** :ref:`int<class_int>` index, :ref:`Color<class_Color>` color **)**

Sets color palette entry at ``index`` position with ``color``.

----

.. _class_ImageIndexed_method_set_pixel_indexed:

- void **set_pixel_indexed** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y, :ref:`int<class_int>` index **)**

Sets an index which should be mapped to color palette. See notes for :ref:`Image.set_pixel<class_Image_method_set_pixel>`.

----

.. _class_ImageIndexed_method_unlock_indexed:

- void **unlock_indexed** **(** **)**

Unlocks the index data and prevents changes.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
